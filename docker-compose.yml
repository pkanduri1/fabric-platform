# =============================================================================
# Docker Compose for Fabric Platform Development and Testing
# =============================================================================
# 
# This docker-compose.yml provides a complete development environment
# including the application, database, cache, and monitoring components.
#
# Usage:
#   # Start all services
#   docker-compose up -d
#
#   # Start specific services
#   docker-compose up -d postgres redis
#
#   # View logs
#   docker-compose logs -f fabric-app
#
#   # Stop all services
#   docker-compose down
#
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: fabric-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fabric_platform
      POSTGRES_USER: fabric_user
      POSTGRES_PASSWORD: fabric_secure_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./fabric-core/fabric-data-loader/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fabric_user -d fabric_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # CACHE SERVICES
  # =============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: fabric-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================
  
  fabric-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fabric-application
    restart: unless-stopped
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: docker
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fabric_platform
      DB_USERNAME: fabric_user
      DB_PASSWORD: fabric_secure_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Security Configuration
      JWT_SECRET: fabric-jwt-secret-key-for-docker-dev-only
      ENCRYPTION_KEY: fabric-encryption-key-for-docker-dev-only
      
      # Monitoring Configuration
      FABRIC_MONITORING_ENABLED: true
      WEBSOCKET_SECURITY_ENABLED: true
      FABRIC_AUDIT_ENABLED: true
      
      # Performance Configuration
      JAVA_OPTS: "-Xms512m -Xmx1g -XX:+UseG1GC"
      
    ports:
      - "8080:8080"
      - "8081:8081"  # Management/Actuator port
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    networks:
      - fabric-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # MONITORING SERVICES (Optional)
  # =============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: fabric-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - fabric-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    container_name: fabric-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: fabric_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - fabric-network
    depends_on:
      - prometheus
    profiles: ["monitoring"]

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  fabric-network:
    driver: bridge
    name: fabric-platform-network

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    name: fabric-postgres-data
  redis_data:
    name: fabric-redis-data
  prometheus_data:
    name: fabric-prometheus-data
  grafana_data:
    name: fabric-grafana-data
-- ============================================================================
-- SQL*LOADER DATABASE FOUNDATION - PHASE 1.1
-- Migration Script: V2024.003__sql_loader_foundation_tables.sql
-- ============================================================================
-- This script creates SQL*Loader specific tables for Phase 1.1 implementation
-- Extends existing CM3INT schema with SQL*Loader control file configurations,
-- execution tracking, performance metrics, and security features.
-- ============================================================================

-- ============================================================================
-- SQL*LOADER CONFIGURATION TABLES
-- ============================================================================

-- SQL*Loader control file configurations
CREATE TABLE CM3INT.sql_loader_configs (
    config_id VARCHAR2(100) PRIMARY KEY,
    job_name VARCHAR2(50) NOT NULL,
    source_system VARCHAR2(50) NOT NULL,
    target_table VARCHAR2(100) NOT NULL,
    control_file_template CLOB NOT NULL,
    load_method VARCHAR2(20) DEFAULT 'INSERT' CHECK (load_method IN ('INSERT', 'APPEND', 'REPLACE', 'TRUNCATE')),
    direct_path VARCHAR2(1) DEFAULT 'Y' CHECK (direct_path IN ('Y', 'N')),
    parallel_degree NUMBER DEFAULT 1,
    bind_size NUMBER DEFAULT 256000,
    read_size NUMBER DEFAULT 1048576,
    max_errors NUMBER DEFAULT 1000,
    skip_rows NUMBER DEFAULT 1,
    rows_per_commit NUMBER DEFAULT 64,
    field_delimiter VARCHAR2(10) DEFAULT '|',
    record_delimiter VARCHAR2(10) DEFAULT CHR(10),
    string_delimiter VARCHAR2(5) DEFAULT '"',
    character_set VARCHAR2(20) DEFAULT 'UTF8',
    date_format VARCHAR2(50) DEFAULT 'YYYY-MM-DD HH24:MI:SS',
    timestamp_format VARCHAR2(50) DEFAULT 'YYYY-MM-DD HH24:MI:SS.FF',
    null_if VARCHAR2(20) DEFAULT 'BLANKS',
    trim_whitespace VARCHAR2(1) DEFAULT 'Y' CHECK (trim_whitespace IN ('Y', 'N')),
    optional_enclosures VARCHAR2(1) DEFAULT 'Y' CHECK (optional_enclosures IN ('Y', 'N')),
    resumable VARCHAR2(1) DEFAULT 'Y' CHECK (resumable IN ('Y', 'N')),
    resumable_timeout NUMBER DEFAULT 7200,
    resumable_name VARCHAR2(100),
    stream_size NUMBER DEFAULT 256000,
    silent_mode VARCHAR2(1) DEFAULT 'N' CHECK (silent_mode IN ('Y', 'N')),
    continue_load VARCHAR2(1) DEFAULT 'N' CHECK (continue_load IN ('Y', 'N')),
    encryption_required VARCHAR2(1) DEFAULT 'N' CHECK (encryption_required IN ('Y', 'N')),
    encryption_algorithm VARCHAR2(20) DEFAULT 'AES256',
    encryption_key_id VARCHAR2(100),
    audit_trail_required VARCHAR2(1) DEFAULT 'Y' CHECK (audit_trail_required IN ('Y', 'N')),
    pre_execution_sql CLOB,
    post_execution_sql CLOB,
    custom_options VARCHAR2(2000),
    validation_enabled VARCHAR2(1) DEFAULT 'Y' CHECK (validation_enabled IN ('Y', 'N')),
    data_classification VARCHAR2(20) DEFAULT 'INTERNAL' CHECK (data_classification IN ('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'RESTRICTED', 'TOP_SECRET')),
    pii_fields VARCHAR2(1000), -- Comma-separated list of PII field names
    regulatory_compliance VARCHAR2(100), -- SOX, PCI-DSS, GDPR, etc.
    retention_days NUMBER DEFAULT 2555, -- 7 years default for financial data
    notification_emails VARCHAR2(1000),
    description VARCHAR2(2000),
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR2(50),
    modified_date TIMESTAMP,
    version NUMBER DEFAULT 1,
    enabled VARCHAR2(1) DEFAULT 'Y' CHECK (enabled IN ('Y', 'N')),
    CONSTRAINT uk_sql_loader_config UNIQUE (source_system, job_name, enabled)
);

-- SQL*Loader field configurations for control file generation
CREATE TABLE CM3INT.sql_loader_field_configs (
    field_config_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_id VARCHAR2(100) NOT NULL,
    field_name VARCHAR2(100) NOT NULL,
    column_name VARCHAR2(100) NOT NULL,
    field_position NUMBER, -- For fixed-width files
    field_length NUMBER, -- For fixed-width files
    data_type VARCHAR2(50) NOT NULL, -- CHAR, NUMBER, DATE, TIMESTAMP, etc.
    format_mask VARCHAR2(100), -- Format mask for dates/numbers
    nullable VARCHAR2(1) DEFAULT 'Y' CHECK (nullable IN ('Y', 'N')),
    default_value VARCHAR2(500),
    sql_expression CLOB, -- SQL expression for field transformation
    encrypted VARCHAR2(1) DEFAULT 'N' CHECK (encrypted IN ('Y', 'N')),
    encryption_function VARCHAR2(200),
    validation_rule VARCHAR2(1000),
    null_if_condition VARCHAR2(100) DEFAULT 'BLANKS',
    trim_field VARCHAR2(1) DEFAULT 'Y' CHECK (trim_field IN ('Y', 'N')),
    case_sensitive VARCHAR2(20) DEFAULT 'PRESERVE' CHECK (case_sensitive IN ('PRESERVE', 'UPPER', 'LOWER')),
    max_length NUMBER,
    min_length NUMBER,
    character_set VARCHAR2(20),
    check_constraint VARCHAR2(1000),
    lookup_table VARCHAR2(100),
    lookup_column VARCHAR2(100),
    unique_constraint VARCHAR2(1) DEFAULT 'N' CHECK (unique_constraint IN ('Y', 'N')),
    primary_key VARCHAR2(1) DEFAULT 'N' CHECK (primary_key IN ('Y', 'N')),
    business_rule_class VARCHAR2(200),
    business_rule_parameters VARCHAR2(2000),
    audit_field VARCHAR2(1) DEFAULT 'N' CHECK (audit_field IN ('Y', 'N')),
    source_field VARCHAR2(100),
    transformation_applied VARCHAR2(500),
    data_lineage VARCHAR2(1000),
    field_order NUMBER NOT NULL,
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR2(50),
    modified_date TIMESTAMP,
    version NUMBER DEFAULT 1,
    enabled VARCHAR2(1) DEFAULT 'Y' CHECK (enabled IN ('Y', 'N')),
    FOREIGN KEY (config_id) REFERENCES CM3INT.sql_loader_configs(config_id) ON DELETE CASCADE,
    CONSTRAINT uk_field_config_order UNIQUE (config_id, field_order)
);

-- SQL*Loader execution results and performance tracking
CREATE TABLE CM3INT.sql_loader_executions (
    execution_id VARCHAR2(100) PRIMARY KEY,
    config_id VARCHAR2(100) NOT NULL,
    job_execution_id VARCHAR2(100), -- Links to processing_jobs table
    correlation_id VARCHAR2(100) NOT NULL,
    file_name VARCHAR2(500) NOT NULL,
    file_path VARCHAR2(1000) NOT NULL,
    file_size NUMBER,
    file_checksum VARCHAR2(100),
    control_file_path VARCHAR2(500),
    control_file_content CLOB,
    execution_command CLOB,
    execution_environment VARCHAR2(100),
    execution_status VARCHAR2(20) DEFAULT 'SUBMITTED' CHECK (execution_status IN ('SUBMITTED', 'GENERATING_CONTROL', 'EXECUTING', 'SUCCESS', 'SUCCESS_WITH_WARNINGS', 'FAILED', 'CANCELLED', 'TIMEOUT')),
    sql_loader_return_code NUMBER,
    started_date TIMESTAMP,
    completed_date TIMESTAMP,
    duration_ms NUMBER,
    total_records NUMBER DEFAULT 0,
    successful_records NUMBER DEFAULT 0,
    rejected_records NUMBER DEFAULT 0,
    skipped_records NUMBER DEFAULT 0,
    warning_records NUMBER DEFAULT 0,
    throughput_records_per_sec NUMBER,
    log_file_path VARCHAR2(500),
    bad_file_path VARCHAR2(500),
    discard_file_path VARCHAR2(500),
    log_file_content CLOB,
    execution_output CLOB,
    error_message VARCHAR2(2000),
    error_details CLOB,
    warning_messages CLOB,
    performance_metrics CLOB, -- JSON with detailed performance data
    memory_usage_mb NUMBER,
    cpu_usage_percent NUMBER,
    io_read_mb NUMBER,
    io_write_mb NUMBER,
    retry_count NUMBER DEFAULT 0,
    max_retries NUMBER DEFAULT 3,
    next_retry_date TIMESTAMP,
    notification_sent VARCHAR2(1) DEFAULT 'N' CHECK (notification_sent IN ('Y', 'N')),
    cleanup_completed VARCHAR2(1) DEFAULT 'N' CHECK (cleanup_completed IN ('Y', 'N')),
    archived VARCHAR2(1) DEFAULT 'N' CHECK (archived IN ('Y', 'N')),
    archive_path VARCHAR2(500),
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (config_id) REFERENCES CM3INT.sql_loader_configs(config_id)
);

-- SQL*Loader security and audit events
CREATE TABLE CM3INT.sql_loader_security_audit (
    audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    execution_id VARCHAR2(100),
    config_id VARCHAR2(100),
    correlation_id VARCHAR2(100) NOT NULL,
    security_event_type VARCHAR2(50) NOT NULL CHECK (security_event_type IN ('ACCESS_ATTEMPT', 'PRIVILEGE_ESCALATION', 'DATA_EXPOSURE', 'ENCRYPTION_EVENT', 'PII_ACCESS', 'COMPLIANCE_VIOLATION', 'AUTHENTICATION_FAILURE', 'AUTHORIZATION_FAILURE', 'SUSPICIOUS_ACTIVITY', 'REGULATORY_EVENT')),
    event_description VARCHAR2(1000) NOT NULL,
    severity VARCHAR2(20) DEFAULT 'MEDIUM' CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),
    risk_score NUMBER DEFAULT 50, -- Risk score 0-100
    affected_tables VARCHAR2(1000),
    affected_fields VARCHAR2(2000),
    pii_exposed VARCHAR2(1000),
    sensitive_data_hash VARCHAR2(256),
    regulatory_impact VARCHAR2(500),
    compliance_status VARCHAR2(20) DEFAULT 'REQUIRES_REVIEW' CHECK (compliance_status IN ('COMPLIANT', 'NON_COMPLIANT', 'REQUIRES_REVIEW', 'EXCEPTION_APPROVED', 'REMEDIATED')),
    remediation_required VARCHAR2(1) DEFAULT 'N' CHECK (remediation_required IN ('Y', 'N')),
    remediation_action VARCHAR2(1000),
    remediation_date TIMESTAMP,
    user_id VARCHAR2(50) NOT NULL,
    session_id VARCHAR2(100),
    ip_address VARCHAR2(45),
    user_agent VARCHAR2(500),
    host_name VARCHAR2(100),
    application_context VARCHAR2(500),
    additional_metadata CLOB,
    reported_to_security VARCHAR2(1) DEFAULT 'N' CHECK (reported_to_security IN ('Y', 'N')),
    security_team_notified VARCHAR2(1) DEFAULT 'N' CHECK (security_team_notified IN ('Y', 'N')),
    incident_number VARCHAR2(50),
    audit_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (execution_id) REFERENCES CM3INT.sql_loader_executions(execution_id),
    FOREIGN KEY (config_id) REFERENCES CM3INT.sql_loader_configs(config_id)
);

-- SQL*Loader performance baselines and thresholds
CREATE TABLE CM3INT.sql_loader_performance_baselines (
    baseline_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_id VARCHAR2(100) NOT NULL,
    baseline_period VARCHAR2(20) DEFAULT 'WEEKLY' CHECK (baseline_period IN ('DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY')),
    baseline_start_date DATE NOT NULL,
    baseline_end_date DATE NOT NULL,
    avg_execution_time_ms NUMBER,
    avg_throughput_records_per_sec NUMBER,
    avg_success_rate_percent NUMBER,
    avg_memory_usage_mb NUMBER,
    avg_cpu_usage_percent NUMBER,
    avg_io_throughput_mb_per_sec NUMBER,
    max_execution_time_ms NUMBER,
    min_execution_time_ms NUMBER,
    max_records_processed NUMBER,
    min_records_processed NUMBER,
    total_executions NUMBER DEFAULT 0,
    successful_executions NUMBER DEFAULT 0,
    failed_executions NUMBER DEFAULT 0,
    warning_executions NUMBER DEFAULT 0,
    performance_grade VARCHAR2(1) CHECK (performance_grade IN ('A', 'B', 'C', 'D', 'F')),
    performance_trend VARCHAR2(20) CHECK (performance_trend IN ('IMPROVING', 'STABLE', 'DEGRADING', 'VOLATILE')),
    threshold_breaches NUMBER DEFAULT 0,
    alert_threshold_ms NUMBER,
    warning_threshold_ms NUMBER,
    critical_threshold_ms NUMBER,
    recommendations CLOB,
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (config_id) REFERENCES CM3INT.sql_loader_configs(config_id)
);

-- ============================================================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- ============================================================================

-- SQL*Loader Configs indexes
CREATE INDEX idx_sql_loader_config_source_job ON CM3INT.sql_loader_configs(source_system, job_name);
CREATE INDEX idx_sql_loader_config_enabled ON CM3INT.sql_loader_configs(enabled);
CREATE INDEX idx_sql_loader_config_target_table ON CM3INT.sql_loader_configs(target_table);
CREATE INDEX idx_sql_loader_config_created_date ON CM3INT.sql_loader_configs(created_date);
CREATE INDEX idx_sql_loader_config_pii ON CM3INT.sql_loader_configs(pii_fields) WHERE pii_fields IS NOT NULL;

-- Field Configs indexes
CREATE INDEX idx_sql_loader_field_config_id ON CM3INT.sql_loader_field_configs(config_id);
CREATE INDEX idx_sql_loader_field_name ON CM3INT.sql_loader_field_configs(field_name);
CREATE INDEX idx_sql_loader_field_order ON CM3INT.sql_loader_field_configs(config_id, field_order);
CREATE INDEX idx_sql_loader_field_encrypted ON CM3INT.sql_loader_field_configs(encrypted) WHERE encrypted = 'Y';

-- Executions indexes
CREATE INDEX idx_sql_loader_exec_config_id ON CM3INT.sql_loader_executions(config_id);
CREATE INDEX idx_sql_loader_exec_correlation_id ON CM3INT.sql_loader_executions(correlation_id);
CREATE INDEX idx_sql_loader_exec_status ON CM3INT.sql_loader_executions(execution_status);
CREATE INDEX idx_sql_loader_exec_started_date ON CM3INT.sql_loader_executions(started_date);
CREATE INDEX idx_sql_loader_exec_file_name ON CM3INT.sql_loader_executions(file_name);
CREATE INDEX idx_sql_loader_exec_return_code ON CM3INT.sql_loader_executions(sql_loader_return_code);

-- Security Audit indexes
CREATE INDEX idx_sql_loader_security_exec_id ON CM3INT.sql_loader_security_audit(execution_id);
CREATE INDEX idx_sql_loader_security_config_id ON CM3INT.sql_loader_security_audit(config_id);
CREATE INDEX idx_sql_loader_security_correlation ON CM3INT.sql_loader_security_audit(correlation_id);
CREATE INDEX idx_sql_loader_security_event_type ON CM3INT.sql_loader_security_audit(security_event_type);
CREATE INDEX idx_sql_loader_security_severity ON CM3INT.sql_loader_security_audit(severity);
CREATE INDEX idx_sql_loader_security_compliance ON CM3INT.sql_loader_security_audit(compliance_status);
CREATE INDEX idx_sql_loader_security_timestamp ON CM3INT.sql_loader_security_audit(audit_timestamp);

-- Performance Baselines indexes
CREATE INDEX idx_sql_loader_baseline_config_id ON CM3INT.sql_loader_performance_baselines(config_id);
CREATE INDEX idx_sql_loader_baseline_period ON CM3INT.sql_loader_performance_baselines(baseline_period);
CREATE INDEX idx_sql_loader_baseline_start_date ON CM3INT.sql_loader_performance_baselines(baseline_start_date);

-- ============================================================================
-- TRIGGERS FOR AUDIT TRAIL AND SECURITY
-- ============================================================================

-- Trigger for SQL*Loader config changes audit
CREATE OR REPLACE TRIGGER CM3INT.trg_sql_loader_config_audit
    AFTER INSERT OR UPDATE OR DELETE ON CM3INT.sql_loader_configs
    FOR EACH ROW
DECLARE
    v_action VARCHAR2(10);
    v_user VARCHAR2(50);
    v_correlation_id VARCHAR2(100);
BEGIN
    -- Determine action type
    IF INSERTING THEN
        v_action := 'INSERT';
    ELSIF UPDATING THEN
        v_action := 'UPDATE';
    ELSE
        v_action := 'DELETE';
    END IF;
    
    -- Get current user and generate correlation ID
    v_user := COALESCE(SYS_CONTEXT('USERENV', 'SESSION_USER'), 'SYSTEM');
    v_correlation_id := 'SQL_LOADER_CONFIG_' || TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF');
    
    -- Insert security audit record for configuration changes
    INSERT INTO CM3INT.sql_loader_security_audit (
        config_id, correlation_id, security_event_type, event_description,
        severity, user_id, audit_timestamp, additional_metadata
    ) VALUES (
        COALESCE(:NEW.config_id, :OLD.config_id),
        v_correlation_id,
        'ACCESS_ATTEMPT',
        'SQL*Loader configuration ' || LOWER(v_action) || ' operation',
        CASE 
            WHEN v_action = 'DELETE' THEN 'HIGH'
            WHEN v_action = 'UPDATE' AND (:OLD.encryption_required != :NEW.encryption_required OR :OLD.pii_fields != :NEW.pii_fields) THEN 'MEDIUM'
            ELSE 'LOW'
        END,
        v_user,
        SYSTIMESTAMP,
        '{"action":"' || v_action || '","table":"sql_loader_configs","affected_fields":"' || 
        CASE WHEN UPDATING THEN 
            CASE 
                WHEN :OLD.encryption_required != :NEW.encryption_required THEN 'encryption_required,'
                ELSE ''
            END ||
            CASE 
                WHEN :OLD.pii_fields != :NEW.pii_fields THEN 'pii_fields,'
                ELSE ''
            END
        ELSE 'all' 
        END || '"}'
    );
END;
/

-- Trigger for automatic performance baseline calculation
CREATE OR REPLACE TRIGGER CM3INT.trg_sql_loader_exec_stats
    AFTER INSERT OR UPDATE ON CM3INT.sql_loader_executions
    FOR EACH ROW
WHEN (NEW.execution_status = 'SUCCESS' OR NEW.execution_status = 'SUCCESS_WITH_WARNINGS')
BEGIN
    -- Update execution statistics (this would trigger a procedure call in real implementation)
    -- For now, just log the execution for future baseline calculation
    NULL;
END;
/

-- ============================================================================
-- VIEWS FOR REPORTING AND MONITORING
-- ============================================================================

-- SQL*Loader configuration summary view
CREATE OR REPLACE VIEW CM3INT.v_sql_loader_config_summary AS
SELECT 
    slc.config_id,
    slc.job_name,
    slc.source_system,
    slc.target_table,
    slc.load_method,
    slc.direct_path,
    slc.parallel_degree,
    slc.max_errors,
    slc.encryption_required,
    CASE WHEN slc.pii_fields IS NOT NULL THEN 'Y' ELSE 'N' END as contains_pii,
    slc.data_classification,
    slc.regulatory_compliance,
    slc.enabled,
    COUNT(sle.execution_id) as total_executions,
    SUM(CASE WHEN sle.execution_status IN ('SUCCESS', 'SUCCESS_WITH_WARNINGS') THEN 1 ELSE 0 END) as successful_executions,
    SUM(CASE WHEN sle.execution_status = 'FAILED' THEN 1 ELSE 0 END) as failed_executions,
    AVG(sle.duration_ms) as avg_duration_ms,
    AVG(sle.throughput_records_per_sec) as avg_throughput_records_per_sec,
    SUM(sle.total_records) as total_records_processed,
    MAX(sle.completed_date) as last_execution_date,
    slc.created_date,
    slc.modified_date,
    slc.version
FROM CM3INT.sql_loader_configs slc
LEFT JOIN CM3INT.sql_loader_executions sle ON slc.config_id = sle.config_id
GROUP BY slc.config_id, slc.job_name, slc.source_system, slc.target_table, 
         slc.load_method, slc.direct_path, slc.parallel_degree, slc.max_errors,
         slc.encryption_required, slc.pii_fields, slc.data_classification,
         slc.regulatory_compliance, slc.enabled, slc.created_date, 
         slc.modified_date, slc.version;

-- Security and compliance monitoring view
CREATE OR REPLACE VIEW CM3INT.v_sql_loader_security_summary AS
SELECT 
    DATE(audit_timestamp) as audit_date,
    security_event_type,
    severity,
    compliance_status,
    COUNT(*) as event_count,
    COUNT(DISTINCT config_id) as unique_configs_affected,
    COUNT(DISTINCT user_id) as unique_users,
    SUM(CASE WHEN remediation_required = 'Y' THEN 1 ELSE 0 END) as events_requiring_remediation,
    AVG(risk_score) as avg_risk_score
FROM CM3INT.sql_loader_security_audit
WHERE audit_timestamp >= TRUNC(SYSDATE) - 30  -- Last 30 days
GROUP BY DATE(audit_timestamp), security_event_type, severity, compliance_status
ORDER BY audit_date DESC, severity DESC;

-- Performance metrics view
CREATE OR REPLACE VIEW CM3INT.v_sql_loader_performance AS
SELECT 
    slc.config_id,
    slc.job_name,
    slc.source_system,
    slc.target_table,
    COUNT(sle.execution_id) as executions_last_30_days,
    AVG(sle.duration_ms) as avg_execution_time_ms,
    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY sle.duration_ms) as median_execution_time_ms,
    PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY sle.duration_ms) as p95_execution_time_ms,
    AVG(sle.throughput_records_per_sec) as avg_throughput_records_per_sec,
    AVG(sle.successful_records * 100.0 / NULLIF(sle.total_records, 0)) as avg_success_rate_percent,
    AVG(sle.memory_usage_mb) as avg_memory_usage_mb,
    AVG(sle.cpu_usage_percent) as avg_cpu_usage_percent,
    MAX(sle.duration_ms) as max_execution_time_ms,
    MIN(sle.duration_ms) as min_execution_time_ms,
    STDDEV(sle.duration_ms) as execution_time_stddev_ms,
    COUNT(CASE WHEN sle.execution_status = 'FAILED' THEN 1 END) as failed_executions,
    COUNT(CASE WHEN sle.warning_records > 0 THEN 1 END) as executions_with_warnings
FROM CM3INT.sql_loader_configs slc
LEFT JOIN CM3INT.sql_loader_executions sle ON slc.config_id = sle.config_id
    AND sle.completed_date >= TRUNC(SYSDATE) - 30  -- Last 30 days
WHERE slc.enabled = 'Y'
GROUP BY slc.config_id, slc.job_name, slc.source_system, slc.target_table;

-- ============================================================================
-- SAMPLE DATA FOR TESTING AND DEVELOPMENT
-- ============================================================================

-- Sample SQL*Loader configuration for HR P327 job
INSERT INTO CM3INT.sql_loader_configs (
    config_id, job_name, source_system, target_table, load_method,
    direct_path, parallel_degree, max_errors, field_delimiter,
    encryption_required, pii_fields, data_classification, 
    regulatory_compliance, created_by
) VALUES (
    'HR-P327-SQLLOADER-001', 'p327', 'hr', 'CM3INT.P327_STAGING_TABLE', 'APPEND',
    'Y', 2, 1000, '|',
    'N', 'SSN,EMAIL,PHONE', 'CONFIDENTIAL',
    'SOX,PCI-DSS', 'system'
);

-- Sample field configurations
INSERT INTO CM3INT.sql_loader_field_configs (
    config_id, field_name, column_name, data_type, nullable, field_order, created_by
) VALUES 
('HR-P327-SQLLOADER-001', 'CUSTOMER_ID', 'CUSTOMER_ID', 'NUMBER', 'N', 1, 'system'),
('HR-P327-SQLLOADER-001', 'SSN', 'SSN_ENCRYPTED', 'CHAR(11)', 'Y', 2, 'system'),
('HR-P327-SQLLOADER-001', 'FIRST_NAME', 'FIRST_NAME', 'VARCHAR2(50)', 'N', 3, 'system'),
('HR-P327-SQLLOADER-001', 'LAST_NAME', 'LAST_NAME', 'VARCHAR2(50)', 'N', 4, 'system'),
('HR-P327-SQLLOADER-001', 'EMAIL', 'EMAIL', 'VARCHAR2(100)', 'Y', 5, 'system'),
('HR-P327-SQLLOADER-001', 'PHONE', 'PHONE_NUMBER', 'VARCHAR2(15)', 'Y', 6, 'system'),
('HR-P327-SQLLOADER-001', 'ACCOUNT_BALANCE', 'BALANCE', 'NUMBER(15,2)', 'Y', 7, 'system'),
('HR-P327-SQLLOADER-001', 'CREATED_DATE', 'RECORD_CREATED_DATE', 'DATE', 'N', 8, 'system');

-- Mark SSN and EMAIL fields as encrypted and PII
UPDATE CM3INT.sql_loader_field_configs 
SET encrypted = 'Y', audit_field = 'Y', 
    encryption_function = 'ENCRYPT_SSN'
WHERE config_id = 'HR-P327-SQLLOADER-001' AND field_name = 'SSN';

UPDATE CM3INT.sql_loader_field_configs 
SET audit_field = 'Y'
WHERE config_id = 'HR-P327-SQLLOADER-001' AND field_name IN ('EMAIL', 'PHONE');

-- ============================================================================
-- GRANTS AND SECURITY SETUP
-- ============================================================================

-- Grant permissions to fabric data loader application role
-- Note: These would be executed by DBA with appropriate privileges

-- GRANT SELECT, INSERT, UPDATE, DELETE ON CM3INT.sql_loader_configs TO fabric_data_loader_app;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON CM3INT.sql_loader_field_configs TO fabric_data_loader_app;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON CM3INT.sql_loader_executions TO fabric_data_loader_app;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON CM3INT.sql_loader_security_audit TO fabric_data_loader_app;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON CM3INT.sql_loader_performance_baselines TO fabric_data_loader_app;

-- Grant read-only access to monitoring views
-- GRANT SELECT ON CM3INT.v_sql_loader_config_summary TO fabric_monitoring_role;
-- GRANT SELECT ON CM3INT.v_sql_loader_security_summary TO fabric_security_team_role;
-- GRANT SELECT ON CM3INT.v_sql_loader_performance TO fabric_performance_monitoring_role;

COMMIT;

-- ============================================================================
-- ROLLBACK SCRIPT (For emergency rollback)
-- ============================================================================
/*
-- EMERGENCY ROLLBACK SCRIPT
-- Execute only if rollback is required

DROP TRIGGER CM3INT.trg_sql_loader_exec_stats;
DROP TRIGGER CM3INT.trg_sql_loader_config_audit;

DROP VIEW CM3INT.v_sql_loader_performance;
DROP VIEW CM3INT.v_sql_loader_security_summary;
DROP VIEW CM3INT.v_sql_loader_config_summary;

DROP TABLE CM3INT.sql_loader_performance_baselines;
DROP TABLE CM3INT.sql_loader_security_audit;
DROP TABLE CM3INT.sql_loader_executions;
DROP TABLE CM3INT.sql_loader_field_configs;
DROP TABLE CM3INT.sql_loader_configs;

COMMIT;
*/

-- ============================================================================
-- END OF SQL*LOADER DATABASE FOUNDATION SCHEMA
-- ============================================================================
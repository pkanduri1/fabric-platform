-- ============================================================================
-- TRANSFORMATION CONFIGURATION SCHEMA
-- Database-driven transformation rules for migrating from Excel mappings
-- ============================================================================

-- ============================================================================
-- TRANSFORMATION RULE TABLES
-- ============================================================================

-- Main transformation configurations table
CREATE TABLE transformation_configs (
    config_id VARCHAR2(100) PRIMARY KEY,
    source_system VARCHAR2(50) NOT NULL,
    interface_name VARCHAR2(50) NOT NULL,
    transaction_type VARCHAR2(20) DEFAULT '200',
    file_type VARCHAR2(50) NOT NULL,
    description VARCHAR2(1000),
    excel_source_file VARCHAR2(500), -- Original Excel mapping file reference
    total_fields NUMBER DEFAULT 0,
    active_fields NUMBER DEFAULT 0,
    validation_enabled VARCHAR2(1) DEFAULT 'Y' CHECK (validation_enabled IN ('Y', 'N')),
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR2(50),
    modified_date TIMESTAMP,
    version NUMBER DEFAULT 1,
    enabled VARCHAR2(1) DEFAULT 'Y' CHECK (enabled IN ('Y', 'N')),
    CONSTRAINT uk_transformation_config UNIQUE (source_system, interface_name, transaction_type)
);

-- Field transformation rules (migrated from Excel mapping documents)
CREATE TABLE field_transformation_rules (
    rule_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_id VARCHAR2(100) NOT NULL,
    
    -- Source field information
    source_field_name VARCHAR2(100),
    source_data_type VARCHAR2(50),
    source_format VARCHAR2(100),
    source_length NUMBER,
    
    -- Target field information
    target_field_name VARCHAR2(100) NOT NULL,
    target_position NUMBER NOT NULL,
    target_length NUMBER NOT NULL,
    target_data_type VARCHAR2(50) NOT NULL,
    target_format VARCHAR2(100),
    
    -- Transformation logic
    transformation_type VARCHAR2(50) NOT NULL CHECK (transformation_type IN (
        'source', 'constant', 'blank', 'conditional', 'lookup', 'expression', 
        'concatenation', 'substring', 'date_format', 'numeric_format', 'pad'
    )),
    transformation_expression CLOB, -- Complex transformation logic
    default_value VARCHAR2(4000),
    constant_value VARCHAR2(4000),
    
    -- Formatting and padding
    pad_direction VARCHAR2(10) CHECK (pad_direction IN ('left', 'right', 'none')),
    pad_character VARCHAR2(1) DEFAULT ' ',
    
    -- Conditional logic (if/else)
    condition_expression VARCHAR2(2000),
    if_value VARCHAR2(1000),
    elseif_conditions CLOB, -- JSON array of elseif conditions
    else_value VARCHAR2(1000),
    
    -- Lookup table configuration
    lookup_table VARCHAR2(100),
    lookup_key_column VARCHAR2(100),
    lookup_value_column VARCHAR2(100),
    lookup_default_value VARCHAR2(1000),
    
    -- Data quality and validation
    required_field VARCHAR2(1) DEFAULT 'N' CHECK (required_field IN ('Y', 'N')),
    validation_rule VARCHAR2(2000),
    error_handling VARCHAR2(50) DEFAULT 'default' CHECK (error_handling IN ('default', 'skip', 'fail', 'warning')),
    
    -- Metadata and auditing
    excel_row_reference NUMBER, -- Row number from original Excel mapping
    business_rule_description VARCHAR2(1000),
    execution_order NUMBER DEFAULT 1,
    performance_notes VARCHAR2(500),
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR2(50),
    modified_date TIMESTAMP,
    version NUMBER DEFAULT 1,
    enabled VARCHAR2(1) DEFAULT 'Y' CHECK (enabled IN ('Y', 'N')),
    
    FOREIGN KEY (config_id) REFERENCES transformation_configs(config_id),
    CONSTRAINT uk_field_transform_position UNIQUE (config_id, target_position),
    CONSTRAINT uk_field_transform_name UNIQUE (config_id, target_field_name)
);

-- Conditional transformation expressions (for complex if/elseif/else logic)
CREATE TABLE conditional_expressions (
    expression_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rule_id NUMBER NOT NULL,
    condition_type VARCHAR2(20) NOT NULL CHECK (condition_type IN ('if', 'elseif', 'else')),
    condition_sequence NUMBER NOT NULL,
    condition_expression VARCHAR2(2000), -- NULL for 'else' type
    result_value VARCHAR2(1000),
    result_expression CLOB, -- For complex result calculations
    description VARCHAR2(500),
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (rule_id) REFERENCES field_transformation_rules(rule_id),
    CONSTRAINT uk_conditional_sequence UNIQUE (rule_id, condition_sequence)
);

-- Staging table configuration for ETL pipeline
CREATE TABLE staging_table_configs (
    staging_config_id VARCHAR2(100) PRIMARY KEY,
    config_id VARCHAR2(100) NOT NULL,
    staging_table_name VARCHAR2(100) NOT NULL,
    staging_schema VARCHAR2(50) DEFAULT 'STAGING',
    target_table_name VARCHAR2(100) NOT NULL,
    target_schema VARCHAR2(50) DEFAULT 'PROD',
    
    -- Staging table characteristics
    staging_type VARCHAR2(50) DEFAULT 'TEMPORARY' CHECK (staging_type IN ('TEMPORARY', 'PERSISTENT', 'EXTERNAL')),
    retention_days NUMBER DEFAULT 7,
    partition_strategy VARCHAR2(50), -- DATE, HASH, RANGE, etc.
    partition_column VARCHAR2(100),
    
    -- ETL processing configuration
    batch_size NUMBER DEFAULT 10000,
    parallel_degree NUMBER DEFAULT 4,
    validation_level VARCHAR2(20) DEFAULT 'STANDARD' CHECK (validation_level IN ('NONE', 'BASIC', 'STANDARD', 'COMPREHENSIVE')),
    error_threshold_percent NUMBER DEFAULT 5,
    
    -- Data lineage and audit
    source_system VARCHAR2(50),
    data_classification VARCHAR2(20) DEFAULT 'INTERNAL' CHECK (data_classification IN ('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'RESTRICTED')),
    pii_fields VARCHAR2(2000), -- Comma-separated list of PII field names
    
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR2(50),
    modified_date TIMESTAMP,
    enabled VARCHAR2(1) DEFAULT 'Y' CHECK (enabled IN ('Y', 'N')),
    
    FOREIGN KEY (config_id) REFERENCES transformation_configs(config_id)
);

-- Transformation execution audit trail
CREATE TABLE transformation_execution_audit (
    execution_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_id VARCHAR2(100) NOT NULL,
    correlation_id VARCHAR2(100) NOT NULL,
    execution_type VARCHAR2(50) NOT NULL CHECK (execution_type IN ('FULL_LOAD', 'INCREMENTAL', 'VALIDATION_ONLY', 'TEST_RUN')),
    
    -- Execution timing
    start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    end_time TIMESTAMP,
    duration_ms NUMBER,
    
    -- Processing statistics
    source_record_count NUMBER DEFAULT 0,
    staging_record_count NUMBER DEFAULT 0,
    target_record_count NUMBER DEFAULT 0,
    error_record_count NUMBER DEFAULT 0,
    warning_record_count NUMBER DEFAULT 0,
    
    -- Transformation results by rule
    rules_executed NUMBER DEFAULT 0,
    rules_successful NUMBER DEFAULT 0,
    rules_failed NUMBER DEFAULT 0,
    
    -- File and batch information
    source_file_name VARCHAR2(500),
    source_file_size NUMBER,
    batch_id VARCHAR2(100),
    
    -- Status and error handling
    execution_status VARCHAR2(20) NOT NULL CHECK (execution_status IN ('STARTED', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED')),
    error_message VARCHAR2(2000),
    warning_message VARCHAR2(2000),
    
    -- Performance metrics
    throughput_records_per_sec NUMBER,
    memory_usage_mb NUMBER,
    cpu_usage_percent NUMBER,
    
    -- Audit information
    executed_by VARCHAR2(50) NOT NULL,
    execution_mode VARCHAR2(20) DEFAULT 'BATCH' CHECK (execution_mode IN ('BATCH', 'INTERACTIVE', 'SCHEDULED')),
    environment VARCHAR2(20),
    
    FOREIGN KEY (config_id) REFERENCES transformation_configs(config_id)
);

-- Field-level transformation audit (detailed tracking)
CREATE TABLE field_transformation_audit (
    audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    execution_id NUMBER NOT NULL,
    rule_id NUMBER NOT NULL,
    record_id VARCHAR2(100), -- Business key of the record being transformed
    
    -- Field transformation details
    source_value VARCHAR2(4000),
    transformed_value VARCHAR2(4000),
    transformation_applied VARCHAR2(500),
    
    -- Validation results
    validation_passed VARCHAR2(1) DEFAULT 'Y' CHECK (validation_passed IN ('Y', 'N')),
    validation_error VARCHAR2(1000),
    data_quality_score NUMBER, -- 0-100 scale
    
    -- Performance tracking
    transformation_time_ms NUMBER,
    
    -- Audit timestamp
    audit_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (execution_id) REFERENCES transformation_execution_audit(execution_id),
    FOREIGN KEY (rule_id) REFERENCES field_transformation_rules(rule_id)
);

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================

-- Transformation Configs indexes
CREATE INDEX idx_transform_config_system_interface ON transformation_configs(source_system, interface_name);
CREATE INDEX idx_transform_config_enabled ON transformation_configs(enabled);

-- Field Transformation Rules indexes
CREATE INDEX idx_field_transform_config_id ON field_transformation_rules(config_id);
CREATE INDEX idx_field_transform_position ON field_transformation_rules(config_id, target_position);
CREATE INDEX idx_field_transform_type ON field_transformation_rules(transformation_type);
CREATE INDEX idx_field_transform_execution_order ON field_transformation_rules(config_id, execution_order);

-- Conditional Expressions indexes
CREATE INDEX idx_conditional_rule_id ON conditional_expressions(rule_id);
CREATE INDEX idx_conditional_sequence ON conditional_expressions(rule_id, condition_sequence);

-- Staging Table Configs indexes
CREATE INDEX idx_staging_config_id ON staging_table_configs(config_id);
CREATE INDEX idx_staging_enabled ON staging_table_configs(enabled);

-- Execution Audit indexes
CREATE INDEX idx_transform_exec_config_id ON transformation_execution_audit(config_id);
CREATE INDEX idx_transform_exec_correlation ON transformation_execution_audit(correlation_id);
CREATE INDEX idx_transform_exec_start_time ON transformation_execution_audit(start_time);
CREATE INDEX idx_transform_exec_status ON transformation_execution_audit(execution_status);

-- Field Audit indexes
CREATE INDEX idx_field_audit_execution_id ON field_transformation_audit(execution_id);
CREATE INDEX idx_field_audit_rule_id ON field_transformation_audit(rule_id);
CREATE INDEX idx_field_audit_timestamp ON field_transformation_audit(audit_timestamp);

-- ============================================================================
-- SEQUENCES
-- ============================================================================

CREATE SEQUENCE seq_field_transform_rule_id START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_conditional_expression_id START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_transform_execution_audit_id START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_field_transform_audit_id START WITH 1 INCREMENT BY 1 NOCACHE;

-- ============================================================================
-- VIEWS FOR REPORTING
-- ============================================================================

-- Transformation configuration summary
CREATE OR REPLACE VIEW v_transformation_config_summary AS
SELECT 
    tc.config_id,
    tc.source_system,
    tc.interface_name,
    tc.transaction_type,
    tc.description,
    tc.total_fields,
    tc.active_fields,
    COUNT(ftr.rule_id) as configured_rules,
    SUM(CASE WHEN ftr.enabled = 'Y' THEN 1 ELSE 0 END) as active_rules,
    MAX(tea.start_time) as last_execution_time,
    tc.enabled,
    tc.created_date,
    tc.modified_date
FROM transformation_configs tc
LEFT JOIN field_transformation_rules ftr ON tc.config_id = ftr.config_id
LEFT JOIN transformation_execution_audit tea ON tc.config_id = tea.config_id
GROUP BY tc.config_id, tc.source_system, tc.interface_name, tc.transaction_type, 
         tc.description, tc.total_fields, tc.active_fields, tc.enabled, 
         tc.created_date, tc.modified_date;

-- Field transformation rules summary
CREATE OR REPLACE VIEW v_field_transformation_summary AS
SELECT 
    ftr.config_id,
    tc.source_system,
    tc.interface_name,
    ftr.target_field_name,
    ftr.transformation_type,
    ftr.required_field,
    ftr.execution_order,
    COUNT(ce.expression_id) as conditional_expressions,
    ftr.enabled,
    ftr.created_date
FROM field_transformation_rules ftr
JOIN transformation_configs tc ON ftr.config_id = tc.config_id
LEFT JOIN conditional_expressions ce ON ftr.rule_id = ce.rule_id
WHERE ftr.enabled = 'Y' AND tc.enabled = 'Y'
GROUP BY ftr.config_id, tc.source_system, tc.interface_name, ftr.target_field_name,
         ftr.transformation_type, ftr.required_field, ftr.execution_order,
         ftr.enabled, ftr.created_date
ORDER BY ftr.config_id, ftr.execution_order;

-- Transformation performance metrics
CREATE OR REPLACE VIEW v_transformation_performance AS
SELECT 
    tea.config_id,
    tc.source_system,
    tc.interface_name,
    COUNT(*) as total_executions,
    AVG(tea.duration_ms) as avg_duration_ms,
    AVG(tea.throughput_records_per_sec) as avg_throughput,
    AVG(tea.source_record_count) as avg_source_records,
    AVG(tea.error_record_count * 100.0 / NULLIF(tea.source_record_count, 0)) as avg_error_rate_percent,
    MAX(tea.start_time) as last_execution,
    SUM(CASE WHEN tea.execution_status = 'COMPLETED' THEN 1 ELSE 0 END) as successful_executions,
    SUM(CASE WHEN tea.execution_status = 'FAILED' THEN 1 ELSE 0 END) as failed_executions
FROM transformation_execution_audit tea
JOIN transformation_configs tc ON tea.config_id = tc.config_id
WHERE tea.start_time >= TRUNC(SYSDATE) - 30  -- Last 30 days
GROUP BY tea.config_id, tc.source_system, tc.interface_name
ORDER BY avg_error_rate_percent DESC, avg_duration_ms DESC;

-- ============================================================================
-- SAMPLE DATA FOR P327 INTERFACE
-- ============================================================================

-- Sample transformation configuration for P327 HR interface
INSERT INTO transformation_configs (
    config_id, source_system, interface_name, transaction_type, file_type,
    description, excel_source_file, total_fields, active_fields, created_by
) VALUES (
    'HR-P327-200', 'hr', 'p327', '200', 'FIXED_WIDTH',
    'P327 Consumer Lending Interface - Transaction Type 200', 
    'p327-hr-mapping.csv', 35, 35, 'system'
);

-- Sample field transformation rules migrated from Excel mapping
INSERT INTO field_transformation_rules (
    config_id, target_field_name, target_position, target_length, target_data_type,
    transformation_type, constant_value, pad_direction, pad_character,
    excel_row_reference, business_rule_description, execution_order, created_by
) VALUES 
(
    'HR-P327-200', 'LOCATION-CODE', 1, 6, 'String',
    'constant', '100020', 'right', ' ',
    2, 'Fixed location code for HR system', 1, 'system'
),
(
    'HR-P327-200', 'ACCT-NUM', 2, 18, 'String',
    'source', NULL, 'right', ' ',
    3, 'Account number from source system', 2, 'system'
);

-- Sample staging table configuration
INSERT INTO staging_table_configs (
    staging_config_id, config_id, staging_table_name, target_table_name,
    batch_size, parallel_degree, validation_level, created_by
) VALUES (
    'HR-P327-STAGING', 'HR-P327-200', 'STG_P327_HR_DATA', 'P327_CUSTOMER_DATA',
    10000, 4, 'STANDARD', 'system'
);

COMMIT;

-- ============================================================================
-- END OF TRANSFORMATION SCHEMA
-- ============================================================================
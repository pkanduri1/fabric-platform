-- ============================================================================
-- DATA LOADER FRAMEWORK - COMPREHENSIVE DATABASE SCHEMA
-- ============================================================================
-- This script creates all necessary tables for the fabric-data-loader framework
-- including configuration, validation, audit, and lineage tracking tables.
-- ============================================================================

-- ============================================================================
-- DATA LOADING CONFIGURATION TABLES
-- ============================================================================

-- Main data loading configuration table
CREATE TABLE data_load_configs (
    config_id VARCHAR2(100) PRIMARY KEY,
    job_name VARCHAR2(50) NOT NULL,
    source_system VARCHAR2(50) NOT NULL,
    target_table VARCHAR2(100) NOT NULL,
    file_type VARCHAR2(20) DEFAULT 'PIPE_DELIMITED' CHECK (file_type IN ('PIPE_DELIMITED', 'COMMA_DELIMITED', 'TAB_DELIMITED', 'FIXED_WIDTH', 'JSON', 'XML', 'EXCEL')),
    file_path_pattern VARCHAR2(500),
    control_file_template VARCHAR2(100),
    sql_loader_options VARCHAR2(1000) DEFAULT 'DIRECT=TRUE, ERRORS=1000, SKIP=1',
    field_delimiter VARCHAR2(10) DEFAULT '|',
    record_delimiter VARCHAR2(10) DEFAULT CHR(10),
    header_rows NUMBER DEFAULT 1,
    trailer_rows NUMBER DEFAULT 0,
    max_errors NUMBER DEFAULT 1000,
    parallel_degree NUMBER DEFAULT 1,
    validation_enabled VARCHAR2(1) DEFAULT 'Y' CHECK (validation_enabled IN ('Y', 'N')),
    pre_load_validation VARCHAR2(1) DEFAULT 'Y' CHECK (pre_load_validation IN ('Y', 'N')),
    post_load_validation VARCHAR2(1) DEFAULT 'Y' CHECK (post_load_validation IN ('Y', 'N')),
    backup_enabled VARCHAR2(1) DEFAULT 'Y' CHECK (backup_enabled IN ('Y', 'N')),
    backup_path VARCHAR2(500),
    archive_enabled VARCHAR2(1) DEFAULT 'Y' CHECK (archive_enabled IN ('Y', 'N')),
    archive_path VARCHAR2(500),
    encryption_required VARCHAR2(1) DEFAULT 'N' CHECK (encryption_required IN ('Y', 'N')),
    pii_data VARCHAR2(1) DEFAULT 'N' CHECK (pii_data IN ('Y', 'N')),
    data_classification VARCHAR2(20) DEFAULT 'INTERNAL' CHECK (data_classification IN ('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'RESTRICTED', 'TOP_SECRET')),
    retention_days NUMBER DEFAULT 2555, -- 7 years for financial data
    notification_emails VARCHAR2(1000),
    description VARCHAR2(1000),
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR2(50),
    modified_date TIMESTAMP,
    version NUMBER DEFAULT 1,
    enabled VARCHAR2(1) DEFAULT 'Y' CHECK (enabled IN ('Y', 'N')),
    CONSTRAINT uk_data_load_config UNIQUE (source_system, job_name, enabled)
);

-- Validation rules for data loading
CREATE TABLE validation_rules (
    rule_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_id VARCHAR2(100) NOT NULL,
    field_name VARCHAR2(100) NOT NULL,
    rule_type VARCHAR2(50) NOT NULL CHECK (rule_type IN ('DATA_TYPE_VALIDATION', 'LENGTH_VALIDATION', 'PATTERN_VALIDATION', 'REQUIRED_FIELD_VALIDATION', 'UNIQUE_FIELD_VALIDATION', 'REFERENTIAL_INTEGRITY', 'BUSINESS_RULE', 'CUSTOM_SQL_VALIDATION', 'RANGE_VALIDATION', 'DATE_FORMAT_VALIDATION', 'NUMERIC_VALIDATION', 'EMAIL_VALIDATION', 'PHONE_VALIDATION', 'SSN_VALIDATION', 'ACCOUNT_NUMBER_VALIDATION')),
    validation_expression VARCHAR2(2000),
    error_message VARCHAR2(500),
    severity VARCHAR2(20) DEFAULT 'ERROR' CHECK (severity IN ('INFO', 'WARNING', 'ERROR', 'CRITICAL')),
    execution_order NUMBER DEFAULT 1,
    data_type VARCHAR2(50),
    max_length NUMBER,
    min_length NUMBER,
    pattern VARCHAR2(500),
    required_field VARCHAR2(1) DEFAULT 'N' CHECK (required_field IN ('Y', 'N')),
    unique_field VARCHAR2(1) DEFAULT 'N' CHECK (unique_field IN ('Y', 'N')),
    reference_table VARCHAR2(100),
    reference_column VARCHAR2(100),
    lookup_sql VARCHAR2(2000),
    business_rule_class VARCHAR2(200),
    error_threshold NUMBER DEFAULT 0,
    warning_threshold NUMBER DEFAULT 0,
    description VARCHAR2(1000),
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR2(50),
    modified_date TIMESTAMP,
    version NUMBER DEFAULT 1,
    enabled VARCHAR2(1) DEFAULT 'Y' CHECK (enabled IN ('Y', 'N')),
    FOREIGN KEY (config_id) REFERENCES data_load_configs(config_id)
);

-- Processing jobs execution tracking
CREATE TABLE processing_jobs (
    job_execution_id VARCHAR2(100) PRIMARY KEY,
    config_id VARCHAR2(100) NOT NULL,
    correlation_id VARCHAR2(100) NOT NULL,
    batch_id VARCHAR2(50),
    file_name VARCHAR2(500),
    file_path VARCHAR2(1000),
    file_size NUMBER,
    file_checksum VARCHAR2(100),
    job_status VARCHAR2(20) DEFAULT 'SUBMITTED' CHECK (job_status IN ('SUBMITTED', 'QUEUED', 'VALIDATING', 'PROCESSING', 'LOADING', 'POST_PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'RETRYING', 'ROLLBACK_REQUIRED', 'ROLLBACK_COMPLETED')),
    execution_mode VARCHAR2(20) DEFAULT 'BATCH' CHECK (execution_mode IN ('BATCH', 'REAL_TIME', 'SCHEDULED', 'MANUAL')),
    priority VARCHAR2(10) DEFAULT 'NORMAL' CHECK (priority IN ('LOW', 'NORMAL', 'HIGH', 'CRITICAL')),
    submitted_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    started_date TIMESTAMP,
    completed_date TIMESTAMP,
    duration_ms NUMBER,
    total_records NUMBER DEFAULT 0,
    processed_records NUMBER DEFAULT 0,
    successful_records NUMBER DEFAULT 0,
    failed_records NUMBER DEFAULT 0,
    warning_records NUMBER DEFAULT 0,
    duplicate_records NUMBER DEFAULT 0,
    validation_errors NUMBER DEFAULT 0,
    business_rule_errors NUMBER DEFAULT 0,
    referential_errors NUMBER DEFAULT 0,
    sql_loader_return_code NUMBER,
    control_file_path VARCHAR2(500),
    log_file_path VARCHAR2(500),
    bad_file_path VARCHAR2(500),
    discard_file_path VARCHAR2(500),
    backup_file_path VARCHAR2(500),
    archive_file_path VARCHAR2(500),
    error_message VARCHAR2(2000),
    warning_message VARCHAR2(2000),
    rollback_required VARCHAR2(1) DEFAULT 'N' CHECK (rollback_required IN ('Y', 'N')),
    rollback_completed VARCHAR2(1) DEFAULT 'N' CHECK (rollback_completed IN ('Y', 'N')),
    rollback_date TIMESTAMP,
    notification_sent VARCHAR2(1) DEFAULT 'N' CHECK (notification_sent IN ('Y', 'N')),
    retry_count NUMBER DEFAULT 0,
    max_retries NUMBER DEFAULT 3,
    next_retry_date TIMESTAMP,
    created_by VARCHAR2(50) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR2(50),
    modified_date TIMESTAMP,
    FOREIGN KEY (config_id) REFERENCES data_load_configs(config_id)
);

-- Job execution detailed logs
CREATE TABLE job_execution_logs (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    job_execution_id VARCHAR2(100) NOT NULL,
    correlation_id VARCHAR2(100) NOT NULL,
    step_name VARCHAR2(100) NOT NULL,
    step_type VARCHAR2(50) CHECK (step_type IN ('INITIALIZATION', 'VALIDATION', 'PRE_PROCESSING', 'DATA_LOADING', 'SQL_LOADER_EXECUTION', 'POST_PROCESSING', 'CLEANUP', 'ERROR_HANDLING', 'ROLLBACK', 'NOTIFICATION', 'ARCHIVAL', 'BACKUP', 'CUSTOM')),
    step_status VARCHAR2(20) NOT NULL CHECK (step_status IN ('STARTED', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'SKIPPED', 'CANCELLED', 'RETRYING')),
    log_level VARCHAR2(10) DEFAULT 'INFO' CHECK (log_level IN ('TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL')),
    log_message VARCHAR2(4000),
    step_start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    step_end_time TIMESTAMP,
    step_duration_ms NUMBER,
    records_processed NUMBER DEFAULT 0,
    records_successful NUMBER DEFAULT 0,
    records_failed NUMBER DEFAULT 0,
    records_warning NUMBER DEFAULT 0,
    memory_usage_mb NUMBER,
    cpu_usage_percent NUMBER,
    io_read_mb NUMBER,
    io_write_mb NUMBER,
    throughput_records_per_sec NUMBER,
    error_code VARCHAR2(20),
    error_message VARCHAR2(2000),
    error_details CLOB,
    warning_message VARCHAR2(2000),
    additional_data CLOB,
    checkpoint_data VARCHAR2(1000),
    retry_count NUMBER DEFAULT 0,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (job_execution_id) REFERENCES processing_jobs(job_execution_id)
);

-- Comprehensive data loading audit trail
CREATE TABLE data_load_audit (
    audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_id VARCHAR2(100) NOT NULL,
    job_execution_id VARCHAR2(100),
    correlation_id VARCHAR2(100) NOT NULL,
    audit_type VARCHAR2(50) NOT NULL CHECK (audit_type IN ('DATA_LINEAGE', 'SECURITY_EVENT', 'COMPLIANCE_CHECK', 'PERFORMANCE_METRIC', 'ERROR_EVENT', 'CONFIGURATION_CHANGE', 'DATA_TRANSFORMATION', 'VALIDATION_RESULT', 'BUSINESS_RULE_EXECUTION', 'FILE_OPERATION', 'DATABASE_OPERATION', 'SYSTEM_EVENT')),
    event_name VARCHAR2(100) NOT NULL,
    event_description VARCHAR2(1000),
    source_system VARCHAR2(50),
    target_table VARCHAR2(100),
    file_name VARCHAR2(500),
    file_path VARCHAR2(1000),
    record_count NUMBER,
    processed_count NUMBER,
    error_count NUMBER,
    data_source VARCHAR2(200),
    data_destination VARCHAR2(200),
    transformation_applied VARCHAR2(1000),
    validation_rules_applied VARCHAR2(2000),
    business_rules_applied VARCHAR2(2000),
    data_quality_score NUMBER,
    compliance_status VARCHAR2(20) DEFAULT 'COMPLIANT' CHECK (compliance_status IN ('COMPLIANT', 'NON_COMPLIANT', 'REQUIRES_REVIEW', 'EXCEPTION_APPROVED', 'PENDING_APPROVAL')),
    regulatory_requirement VARCHAR2(100),
    retention_period_days NUMBER,
    pii_fields VARCHAR2(1000),
    sensitive_data_hash VARCHAR2(256),
    encryption_applied VARCHAR2(1) DEFAULT 'N' CHECK (encryption_applied IN ('Y', 'N')),
    masking_applied VARCHAR2(1) DEFAULT 'N' CHECK (masking_applied IN ('Y', 'N')),
    access_control_applied VARCHAR2(1) DEFAULT 'N' CHECK (access_control_applied IN ('Y', 'N')),
    user_id VARCHAR2(50) NOT NULL,
    session_id VARCHAR2(100),
    ip_address VARCHAR2(45),
    user_agent VARCHAR2(500),
    application_name VARCHAR2(100) DEFAULT 'fabric-data-loader',
    application_version VARCHAR2(20),
    environment VARCHAR2(20),
    host_name VARCHAR2(100),
    process_id NUMBER,
    thread_id NUMBER,
    execution_time_ms NUMBER,
    memory_usage_mb NUMBER,
    cpu_usage_percent NUMBER,
    error_code VARCHAR2(20),
    error_message VARCHAR2(2000),
    stack_trace CLOB,
    additional_metadata CLOB,
    parent_audit_id NUMBER,
    audit_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (config_id) REFERENCES data_load_configs(config_id),
    FOREIGN KEY (parent_audit_id) REFERENCES data_load_audit(audit_id)
);

-- ============================================================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- ============================================================================

-- Data Load Configs indexes
CREATE INDEX idx_data_load_config_source_job ON data_load_configs(source_system, job_name);
CREATE INDEX idx_data_load_config_enabled ON data_load_configs(enabled);
CREATE INDEX idx_data_load_config_created_date ON data_load_configs(created_date);

-- Validation Rules indexes
CREATE INDEX idx_validation_rules_config_id ON validation_rules(config_id);
CREATE INDEX idx_validation_rules_field_name ON validation_rules(field_name);
CREATE INDEX idx_validation_rules_rule_type ON validation_rules(rule_type);
CREATE INDEX idx_validation_rules_execution_order ON validation_rules(config_id, execution_order);

-- Processing Jobs indexes
CREATE INDEX idx_processing_jobs_config_id ON processing_jobs(config_id);
CREATE INDEX idx_processing_jobs_correlation_id ON processing_jobs(correlation_id);
CREATE INDEX idx_processing_jobs_status ON processing_jobs(job_status);
CREATE INDEX idx_processing_jobs_submitted_date ON processing_jobs(submitted_date);
CREATE INDEX idx_processing_jobs_batch_id ON processing_jobs(batch_id);

-- Job Execution Logs indexes
CREATE INDEX idx_job_exec_logs_job_id ON job_execution_logs(job_execution_id);
CREATE INDEX idx_job_exec_logs_correlation_id ON job_execution_logs(correlation_id);
CREATE INDEX idx_job_exec_logs_step_start_time ON job_execution_logs(step_start_time);
CREATE INDEX idx_job_exec_logs_log_level ON job_execution_logs(log_level);

-- Data Load Audit indexes
CREATE INDEX idx_data_load_audit_config_id ON data_load_audit(config_id);
CREATE INDEX idx_data_load_audit_correlation_id ON data_load_audit(correlation_id);
CREATE INDEX idx_data_load_audit_job_exec_id ON data_load_audit(job_execution_id);
CREATE INDEX idx_data_load_audit_audit_type ON data_load_audit(audit_type);
CREATE INDEX idx_data_load_audit_timestamp ON data_load_audit(audit_timestamp);
CREATE INDEX idx_data_load_audit_compliance ON data_load_audit(compliance_status);
CREATE INDEX idx_data_load_audit_user_id ON data_load_audit(user_id);

-- ============================================================================
-- SEQUENCES FOR BETTER PERFORMANCE
-- ============================================================================

-- Create sequences for manual ID generation if needed
CREATE SEQUENCE seq_validation_rule_id START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_job_execution_log_id START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_data_load_audit_id START WITH 1 INCREMENT BY 1 NOCACHE;

-- ============================================================================
-- TRIGGERS FOR AUDIT TRAIL AND AUTOMATIC UPDATES
-- ============================================================================

-- Trigger for data_load_configs audit trail
CREATE OR REPLACE TRIGGER trg_data_load_config_audit
    AFTER INSERT OR UPDATE OR DELETE ON data_load_configs
    FOR EACH ROW
DECLARE
    v_action VARCHAR2(10);
    v_user VARCHAR2(50);
BEGIN
    -- Determine action type
    IF INSERTING THEN
        v_action := 'INSERT';
    ELSIF UPDATING THEN
        v_action := 'UPDATE';
    ELSE
        v_action := 'DELETE';
    END IF;
    
    -- Get current user
    v_user := COALESCE(SYS_CONTEXT('USERENV', 'SESSION_USER'), 'SYSTEM');
    
    -- Insert audit record
    INSERT INTO data_load_audit (
        config_id, correlation_id, audit_type, event_name, event_description,
        user_id, audit_timestamp, additional_metadata
    ) VALUES (
        COALESCE(:NEW.config_id, :OLD.config_id),
        'CONFIG-' || SYSTIMESTAMP,
        'CONFIGURATION_CHANGE',
        'CONFIG_' || v_action,
        'Data load configuration ' || LOWER(v_action),
        v_user,
        SYSTIMESTAMP,
        '{"action":"' || v_action || '","table":"data_load_configs"}'
    );
END;
/

-- ============================================================================
-- SAMPLE DATA FOR TESTING
-- ============================================================================

-- Sample data load configuration
INSERT INTO data_load_configs (
    config_id, job_name, source_system, target_table, file_type,
    field_delimiter, max_errors, validation_enabled, created_by
) VALUES (
    'HR-P327-001', 'p327', 'hr', 'CUSTOMER_DATA', 'PIPE_DELIMITED',
    '|', 1000, 'Y', 'system'
);

-- Sample validation rules
INSERT INTO validation_rules (
    config_id, field_name, rule_type, data_type, required_field,
    error_message, execution_order, created_by
) VALUES 
('HR-P327-001', 'CUSTOMER_ID', 'REQUIRED_FIELD_VALIDATION', 'INTEGER', 'Y', 'Customer ID is required', 1, 'system'),
('HR-P327-001', 'CUSTOMER_ID', 'DATA_TYPE_VALIDATION', 'INTEGER', 'Y', 'Customer ID must be numeric', 2, 'system'),
('HR-P327-001', 'EMAIL', 'EMAIL_VALIDATION', 'STRING', 'N', 'Invalid email format', 3, 'system'),
('HR-P327-001', 'PHONE', 'PHONE_VALIDATION', 'STRING', 'N', 'Invalid phone number format', 4, 'system');

-- ============================================================================
-- VIEWS FOR REPORTING AND MONITORING
-- ============================================================================

-- Data loading summary view
CREATE OR REPLACE VIEW v_data_load_summary AS
SELECT 
    dlc.config_id,
    dlc.job_name,
    dlc.source_system,
    dlc.target_table,
    dlc.enabled,
    COUNT(pj.job_execution_id) as total_executions,
    SUM(CASE WHEN pj.job_status = 'COMPLETED' THEN 1 ELSE 0 END) as successful_executions,
    SUM(CASE WHEN pj.job_status = 'FAILED' THEN 1 ELSE 0 END) as failed_executions,
    AVG(pj.duration_ms) as avg_duration_ms,
    SUM(pj.total_records) as total_records_processed,
    MAX(pj.completed_date) as last_execution_date
FROM data_load_configs dlc
LEFT JOIN processing_jobs pj ON dlc.config_id = pj.config_id
WHERE dlc.enabled = 'Y'
GROUP BY dlc.config_id, dlc.job_name, dlc.source_system, dlc.target_table, dlc.enabled;

-- Audit trail summary view
CREATE OR REPLACE VIEW v_audit_summary AS
SELECT 
    DATE(audit_timestamp) as audit_date,
    audit_type,
    compliance_status,
    COUNT(*) as event_count,
    COUNT(DISTINCT config_id) as unique_configs,
    COUNT(DISTINCT user_id) as unique_users,
    SUM(CASE WHEN error_count > 0 THEN 1 ELSE 0 END) as events_with_errors
FROM data_load_audit
WHERE audit_timestamp >= TRUNC(SYSDATE) - 30  -- Last 30 days
GROUP BY DATE(audit_timestamp), audit_type, compliance_status
ORDER BY audit_date DESC, audit_type;

-- Performance metrics view
CREATE OR REPLACE VIEW v_performance_metrics AS
SELECT 
    dlc.config_id,
    dlc.job_name,
    dlc.source_system,
    AVG(pj.duration_ms) as avg_execution_time_ms,
    AVG(pj.total_records / NULLIF(pj.duration_ms, 0) * 1000) as avg_throughput_records_per_sec,
    AVG(pj.successful_records * 100.0 / NULLIF(pj.total_records, 0)) as avg_success_rate_percent,
    MAX(pj.duration_ms) as max_execution_time_ms,
    MIN(pj.duration_ms) as min_execution_time_ms
FROM data_load_configs dlc
JOIN processing_jobs pj ON dlc.config_id = pj.config_id
WHERE pj.job_status = 'COMPLETED'
  AND pj.completed_date >= TRUNC(SYSDATE) - 30  -- Last 30 days
GROUP BY dlc.config_id, dlc.job_name, dlc.source_system;

-- ============================================================================
-- GRANTS AND SECURITY
-- ============================================================================

-- Grant necessary permissions (adjust schema/user names as needed)
-- GRANT SELECT, INSERT, UPDATE, DELETE ON data_load_configs TO fabric_data_loader_role;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON validation_rules TO fabric_data_loader_role;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON processing_jobs TO fabric_data_loader_role;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON job_execution_logs TO fabric_data_loader_role;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON data_load_audit TO fabric_data_loader_role;

-- Create role for read-only access for reporting
-- CREATE ROLE fabric_data_loader_readonly;
-- GRANT SELECT ON v_data_load_summary TO fabric_data_loader_readonly;
-- GRANT SELECT ON v_audit_summary TO fabric_data_loader_readonly;
-- GRANT SELECT ON v_performance_metrics TO fabric_data_loader_readonly;

COMMIT;

-- ============================================================================
-- END OF SCHEMA CREATION
-- ============================================================================
package com.truist.batch.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Enhanced SQL*Loader control file generator that integrates with the database-driven
 * configuration management system. Extends the existing ControlFileGenerator
 * with dynamic generation capabilities and enterprise features.
 * 
 * Features:
 * - Dynamic control file generation from database configurations
 * - Security and encryption support
 * - PII handling and compliance features
 * - Performance optimization options
 * - Comprehensive audit trail integration
 * - Template generation and validation
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class EnhancedControlFileGenerator {

    // Inject the existing control file generator from fabric-data-loader
    private final com.truist.batch.sqlloader.ControlFileGenerator baseControlFileGenerator;
    
    // Inject audit service for comprehensive logging
    private final AuditService auditService;
    
    private static final String CONTROL_FILE_EXTENSION = ".ctl";
    private static final String DEFAULT_ENCODING = "UTF-8";
    private static final String CONTROL_FILE_HEADER_COMMENT = 
            "-- SQL*Loader Control File Generated by Fabric Platform\n" +
            "-- Enterprise Configuration Management System\n" +
            "-- Generated at: %s\n" +
            "-- Configuration ID: %s\n" +
            "-- Correlation ID: %s\n";

    /**
     * Generate SQL*Loader control file from database configuration.
     * Integrates with the configuration management system to produce
     * optimized control files with security and compliance features.
     * 
     * @param configId Configuration ID from database
     * @param dataFilePath Path to the data file for loading
     * @return Path to the generated control file
     * @throws IOException if control file cannot be created
     */
    public Path generateControlFileFromConfig(String configId, String dataFilePath) throws IOException {
        log.info("Generating control file from configuration: {} for data file: {}", configId, dataFilePath);
        
        try {
            // This would retrieve configuration from the database
            // For now, create a sample configuration
            var sqlLoaderConfig = createSampleConfigFromId(configId, dataFilePath);
            
            // Use the existing control file generator
            Path controlFilePath = baseControlFileGenerator.generateControlFile(sqlLoaderConfig);
            
            // Enhance the generated file with additional metadata and security features
            enhanceControlFileWithMetadata(controlFilePath, configId, sqlLoaderConfig);
            
            // Create audit trail
            auditService.logSecurityEvent(
                    "CONTROL_FILE_GENERATED",
                    "Generated control file for configuration: " + configId,
                    "SYSTEM",
                    Map.of("configId", configId, "dataFile", dataFilePath, "controlFile", controlFilePath.toString())
            );
            
            log.info("Successfully generated enhanced control file: {}", controlFilePath);
            return controlFilePath;
            
        } catch (Exception e) {
            log.error("Failed to generate control file for configuration {}: {}", configId, e.getMessage(), e);
            throw new IOException("Control file generation failed: " + e.getMessage(), e);
        }
    }

    /**
     * Generate optimized control file for pipe-delimited files with database configuration.
     */
    public Path generatePipeDelimitedControlFileFromConfig(String configId, String dataFilePath) throws IOException {
        log.info("Generating pipe-delimited control file from configuration: {}", configId);
        
        try {
            var sqlLoaderConfig = createSampleConfigFromId(configId, dataFilePath);
            
            // Configure for pipe-delimited format
            configurePipeDelimitedFormat(sqlLoaderConfig);
            
            // Generate using base generator
            Path controlFilePath = baseControlFileGenerator.generatePipeDelimitedControlFile(sqlLoaderConfig);
            
            // Enhance with metadata and security features
            enhanceControlFileWithMetadata(controlFilePath, configId, sqlLoaderConfig);
            
            log.info("Successfully generated pipe-delimited control file: {}", controlFilePath);
            return controlFilePath;
            
        } catch (Exception e) {
            log.error("Failed to generate pipe-delimited control file: {}", e.getMessage(), e);
            throw new IOException("Control file generation failed: " + e.getMessage(), e);
        }
    }

    /**
     * Generate control file for fixed-width files with database configuration.
     */
    public Path generateFixedWidthControlFileFromConfig(String configId, String dataFilePath) throws IOException {
        log.info("Generating fixed-width control file from configuration: {}", configId);
        
        try {
            var sqlLoaderConfig = createSampleConfigFromId(configId, dataFilePath);
            
            // Validate and configure for fixed-width format
            configureFixedWidthFormat(sqlLoaderConfig);
            
            // Generate using base generator
            Path controlFilePath = baseControlFileGenerator.generateFixedWidthControlFile(sqlLoaderConfig);
            
            // Enhance with metadata and security features
            enhanceControlFileWithMetadata(controlFilePath, configId, sqlLoaderConfig);
            
            log.info("Successfully generated fixed-width control file: {}", controlFilePath);
            return controlFilePath;
            
        } catch (Exception e) {
            log.error("Failed to generate fixed-width control file: {}", e.getMessage(), e);
            throw new IOException("Control file generation failed: " + e.getMessage(), e);
        }
    }

    /**
     * Generate control file with security enhancements for PII and encrypted data.
     */
    public Path generateSecureControlFile(String configId, String dataFilePath, 
                                         List<String> piiFields, String encryptionKeyId) throws IOException {
        log.info("Generating secure control file with PII protection for configuration: {}", configId);
        
        try {
            var sqlLoaderConfig = createSampleConfigFromId(configId, dataFilePath);
            
            // Configure security features
            configureSecurityFeatures(sqlLoaderConfig, piiFields, encryptionKeyId);
            
            // Generate base control file
            Path controlFilePath = baseControlFileGenerator.generateControlFile(sqlLoaderConfig);
            
            // Add security enhancements
            addSecurityEnhancements(controlFilePath, piiFields, encryptionKeyId);
            
            // Enhance with metadata
            enhanceControlFileWithMetadata(controlFilePath, configId, sqlLoaderConfig);
            
            // Create security audit trail
            auditService.logSecurityEvent(
                    "SECURE_CONTROL_FILE_GENERATED",
                    "Generated secure control file with PII protection",
                    "SYSTEM",
                    Map.of("configId", configId, "piiFields", piiFields.size(), "encrypted", true)
            );
            
            log.info("Successfully generated secure control file: {}", controlFilePath);
            return controlFilePath;
            
        } catch (Exception e) {
            log.error("Failed to generate secure control file: {}", e.getMessage(), e);
            throw new IOException("Secure control file generation failed: " + e.getMessage(), e);
        }
    }

    /**
     * Generate high-performance control file with optimized settings.
     */
    public Path generateHighPerformanceControlFile(String configId, String dataFilePath,
                                                  int parallelDegree, long bindSize, boolean directPath) throws IOException {
        log.info("Generating high-performance control file for configuration: {}", configId);
        
        try {
            var sqlLoaderConfig = createSampleConfigFromId(configId, dataFilePath);
            
            // Configure performance optimizations
            configurePerformanceOptimizations(sqlLoaderConfig, parallelDegree, bindSize, directPath);
            
            // Generate control file
            Path controlFilePath = baseControlFileGenerator.generateControlFile(sqlLoaderConfig);
            
            // Add performance enhancements
            addPerformanceEnhancements(controlFilePath, parallelDegree, bindSize, directPath);
            
            // Enhance with metadata
            enhanceControlFileWithMetadata(controlFilePath, configId, sqlLoaderConfig);
            
            log.info("Successfully generated high-performance control file: {}", controlFilePath);
            return controlFilePath;
            
        } catch (Exception e) {
            log.error("Failed to generate high-performance control file: {}", e.getMessage(), e);
            throw new IOException("High-performance control file generation failed: " + e.getMessage(), e);
        }
    }

    /**
     * Generate control file template with database metadata.
     */
    public String generateEnhancedTemplate(String targetTable, String fileType, 
                                         List<String> columnNames, Map<String, String> dataTypes) {
        log.debug("Generating enhanced template for table: {}, type: {}", targetTable, fileType);
        
        try {
            StringBuilder template = new StringBuilder();
            
            // Add enhanced header
            template.append(String.format(CONTROL_FILE_HEADER_COMMENT, 
                    LocalDateTime.now(), "TEMPLATE", "TEMPLATE-" + System.currentTimeMillis()));
            template.append("-- Target table: ").append(targetTable).append("\n");
            template.append("-- File type: ").append(fileType).append("\n");
            template.append("-- Columns: ").append(columnNames.size()).append("\n");
            template.append("-- Generated by: Enhanced Control File Generator\n\n");
            
            // Add performance-optimized options
            template.append("OPTIONS (\n");
            template.append("  DIRECT=TRUE,\n");
            template.append("  ERRORS=1000,\n");
            template.append("  SKIP=1,\n");
            template.append("  BINDSIZE=512000,\n");
            template.append("  READSIZE=2097152,\n");
            template.append("  MULTITHREADING=TRUE,\n");
            template.append("  RESUMABLE=TRUE,\n");
            template.append("  RESUMABLE_TIMEOUT=7200\n");
            template.append(")\n\n");
            
            // Add load data section
            template.append("LOAD DATA\n");
            template.append("CHARACTERSET UTF8\n");
            template.append("INFILE 'data_file.dat'\n");
            template.append("BADFILE 'data_file.bad'\n");
            template.append("DISCARDFILE 'data_file.dsc'\n");
            template.append("LOGFILE 'data_file.log'\n\n");
            
            // Add table and field specifications
            template.append("INSERT INTO TABLE ").append(targetTable).append("\n");
            
            if ("DELIMITED".equalsIgnoreCase(fileType)) {
                template.append("FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LTRIM\n");
            }
            
            template.append("TRAILING NULLCOLS\n");
            template.append("(\n");
            
            // Add field specifications with data types
            for (int i = 0; i < columnNames.size(); i++) {
                String columnName = columnNames.get(i);
                String dataType = dataTypes.getOrDefault(columnName, "CHAR");
                
                template.append("  ").append(columnName);
                
                // Add data type specific formatting
                if ("DATE".equals(dataType)) {
                    template.append(" DATE \"YYYY-MM-DD HH24:MI:SS\"");
                } else if ("TIMESTAMP".equals(dataType)) {
                    template.append(" TIMESTAMP \"YYYY-MM-DD HH24:MI:SS.FF\"");
                } else if ("NUMBER".equals(dataType)) {
                    template.append(" DECIMAL EXTERNAL");
                } else {
                    template.append(" CHAR");
                }
                
                // Add field-level validations and transformations
                if (isPotentialPiiField(columnName)) {
                    template.append(" -- PII Field - Consider encryption");
                }
                
                if (i < columnNames.size() - 1) {
                    template.append(",\n");
                } else {
                    template.append("\n");
                }
            }
            
            template.append(")\n\n");
            
            // Add post-processing comments
            template.append("-- Post-processing SQL can be added here\n");
            template.append("-- Example: UPDATE ").append(targetTable).append(" SET LOAD_DATE = SYSDATE;\n");
            template.append("-- Example: COMMIT;\n");
            
            log.debug("Generated enhanced template for table: {}", targetTable);
            return template.toString();
            
        } catch (Exception e) {
            log.error("Failed to generate enhanced template: {}", e.getMessage(), e);
            return baseControlFileGenerator.generateTemplateControlFile(targetTable, columnNames);
        }
    }

    /**
     * Validate control file against database configuration.
     */
    public ValidationResult validateControlFileAgainstConfig(String configId, String controlFileContent) {
        log.debug("Validating control file against configuration: {}", configId);
        
        try {
            ValidationResult result = new ValidationResult();
            result.setConfigId(configId);
            result.setValid(true);
            result.setValidatedAt(LocalDateTime.now());
            
            // Perform comprehensive validation
            List<String> errors = validateSyntax(controlFileContent);
            List<String> warnings = validateBestPractices(controlFileContent);
            List<String> recommendations = generateRecommendations(controlFileContent);
            
            result.setErrors(errors);
            result.setWarnings(warnings);
            result.setRecommendations(recommendations);
            result.setValid(errors.isEmpty());
            
            if (!result.isValid()) {
                log.warn("Control file validation failed for configuration {}: {} errors", configId, errors.size());
            } else {
                log.debug("Control file validation passed for configuration: {}", configId);
            }
            
            return result;
            
        } catch (Exception e) {
            log.error("Failed to validate control file for configuration {}: {}", configId, e.getMessage(), e);
            
            ValidationResult errorResult = new ValidationResult();
            errorResult.setConfigId(configId);
            errorResult.setValid(false);
            errorResult.setErrors(List.of("Validation failed: " + e.getMessage()));
            return errorResult;
        }
    }

    // ==================== HELPER METHODS ====================

    /**
     * Create sample SQL*Loader configuration from configuration ID.
     * In real implementation, this would retrieve from database.
     */
    private com.truist.batch.sqlloader.SqlLoaderConfig createSampleConfigFromId(String configId, String dataFilePath) {
        log.debug("Creating sample configuration for ID: {}", configId);
        
        // This is a simplified implementation - real version would query database
        return com.truist.batch.sqlloader.SqlLoaderConfig.builder()
                .configId(configId)
                .jobName("SAMPLE_JOB")
                .targetTable("SAMPLE_TABLE")
                .dataFileName(dataFilePath)
                .controlFileName(configId + "_control.ctl")
                .loadMethod("INSERT")
                .directPath(true)
                .parallelDegree(1)
                .bindSize(256000L)
                .readSize(1048576L)
                .errors(1000)
                .skip(1)
                .rows(64)
                .fieldDelimiter("|")
                .recordDelimiter("\n")
                .stringDelimiter("\"")
                .characterSet("UTF8")
                .trimWhitespace(true)
                .optionalEnclosures(true)
                .resumable(true)
                .resumableTimeout(7200)
                .correlationId("FABRIC-" + configId + "-" + System.currentTimeMillis())
                .build();
    }

    /**
     * Configure pipe-delimited format settings.
     */
    private void configurePipeDelimitedFormat(com.truist.batch.sqlloader.SqlLoaderConfig config) {
        config.setFieldDelimiter("|");
        config.setRecordDelimiter("\n");
        config.setStringDelimiter("\"");
        config.setOptionalEnclosures(true);
        config.setTrimWhitespace(true);
    }

    /**
     * Configure fixed-width format settings.
     */
    private void configureFixedWidthFormat(com.truist.batch.sqlloader.SqlLoaderConfig config) {
        config.setFieldDelimiter(null);
        config.setStringDelimiter(null);
        config.setOptionalEnclosures(false);
        // Additional fixed-width validations would be performed here
    }

    /**
     * Configure security features for PII and encryption.
     */
    private void configureSecurityFeatures(com.truist.batch.sqlloader.SqlLoaderConfig config,
                                          List<String> piiFields, String encryptionKeyId) {
        config.setEncryptionRequired(true);
        config.setEncryptionKeyId(encryptionKeyId);
        config.setAuditTrailRequired(true);
        
        // Configure PII field handling in field configurations
        // This would be implemented with proper field-level security
        log.debug("Configured security features for {} PII fields", piiFields.size());
    }

    /**
     * Configure performance optimizations.
     */
    private void configurePerformanceOptimizations(com.truist.batch.sqlloader.SqlLoaderConfig config,
                                                  int parallelDegree, long bindSize, boolean directPath) {
        config.setParallelDegree(parallelDegree);
        config.setBindSize(bindSize);
        config.setDirectPath(directPath);
        
        // Optimize read size based on bind size
        config.setReadSize(Math.max(bindSize * 2, 2097152L));
        
        // Enable resumable for large loads
        if (bindSize > 1048576) {
            config.setResumable(true);
            config.setResumableTimeout(14400); // 4 hours for large loads
        }
    }

    /**
     * Enhance control file with additional metadata and comments.
     */
    private void enhanceControlFileWithMetadata(Path controlFilePath, String configId,
                                              com.truist.batch.sqlloader.SqlLoaderConfig config) throws IOException {
        log.debug("Enhancing control file with metadata: {}", controlFilePath);
        
        try {
            // Read existing content
            String existingContent = Files.readString(controlFilePath);
            
            // Prepare enhanced content
            StringBuilder enhancedContent = new StringBuilder();
            
            // Add enhanced header
            enhancedContent.append(String.format(CONTROL_FILE_HEADER_COMMENT,
                    LocalDateTime.now(), configId, config.getCorrelationId()));
            enhancedContent.append("-- Job Name: ").append(config.getJobName()).append("\n");
            enhancedContent.append("-- Target Table: ").append(config.getTargetTable()).append("\n");
            enhancedContent.append("-- Data File: ").append(config.getDataFileName()).append("\n");
            enhancedContent.append("-- Performance Profile: ");
            
            if (config.getDirectPath() && config.getParallelDegree() > 1) {
                enhancedContent.append("HIGH_PERFORMANCE");
            } else if (config.getDirectPath()) {
                enhancedContent.append("OPTIMIZED");
            } else {
                enhancedContent.append("STANDARD");
            }
            enhancedContent.append("\n");
            
            if (config.getEncryptionRequired()) {
                enhancedContent.append("-- Security: ENCRYPTION_ENABLED\n");
            }
            
            enhancedContent.append("-- \n\n");
            
            // Add original content
            enhancedContent.append(existingContent);
            
            // Add footer metadata
            enhancedContent.append("\n\n");
            enhancedContent.append("-- End of Control File\n");
            enhancedContent.append("-- Generated by Fabric Platform Enhanced Control File Generator\n");
            enhancedContent.append("-- Configuration Management System v1.0\n");
            
            // Write enhanced content back to file
            Files.writeString(controlFilePath, enhancedContent.toString());
            
            log.debug("Successfully enhanced control file with metadata");
            
        } catch (Exception e) {
            log.error("Failed to enhance control file with metadata: {}", e.getMessage(), e);
            // Don't fail the entire operation for metadata enhancement issues
        }
    }

    /**
     * Add security enhancements to control file.
     */
    private void addSecurityEnhancements(Path controlFilePath, List<String> piiFields, String encryptionKeyId) throws IOException {
        log.debug("Adding security enhancements to control file");
        
        // Security enhancements would be added here
        // For example: field-level encryption, masking, audit trail setup
        // This is a placeholder for the full security implementation
    }

    /**
     * Add performance enhancements to control file.
     */
    private void addPerformanceEnhancements(Path controlFilePath, int parallelDegree, long bindSize, boolean directPath) throws IOException {
        log.debug("Adding performance enhancements to control file");
        
        // Performance enhancements would be added here
        // For example: optimized buffer settings, parallel configuration
        // This is a placeholder for the full performance implementation
    }

    /**
     * Validate control file syntax.
     */
    private List<String> validateSyntax(String content) {
        List<String> errors = List.of();
        
        if (!content.contains("LOAD DATA")) {
            errors.add("Missing LOAD DATA statement");
        }
        
        if (!content.contains("INTO TABLE")) {
            errors.add("Missing INTO TABLE clause");
        }
        
        // Additional syntax validations would be implemented here
        
        return errors;
    }

    /**
     * Validate best practices.
     */
    private List<String> validateBestPractices(String content) {
        List<String> warnings = List.of();
        
        if (!content.contains("BADFILE")) {
            warnings.add("Consider adding BADFILE clause for error handling");
        }
        
        if (!content.contains("RESUMABLE")) {
            warnings.add("Consider enabling RESUMABLE for large data loads");
        }
        
        // Additional best practice validations would be implemented here
        
        return warnings;
    }

    /**
     * Generate optimization recommendations.
     */
    private List<String> generateRecommendations(String content) {
        List<String> recommendations = List.of();
        
        if (!content.contains("DIRECT=TRUE")) {
            recommendations.add("Enable direct path loading for better performance");
        }
        
        if (!content.contains("MULTITHREADING")) {
            recommendations.add("Consider enabling multithreading for parallel processing");
        }
        
        // Additional recommendations would be implemented here
        
        return recommendations;
    }

    /**
     * Check if field name suggests PII data.
     */
    public boolean isPotentialPiiField(String fieldName) {
        String lowerName = fieldName.toLowerCase();
        return lowerName.contains("ssn") || lowerName.contains("social") ||
               lowerName.contains("phone") || lowerName.contains("email") ||
               lowerName.contains("address") || lowerName.contains("name") ||
               lowerName.contains("dob") || lowerName.contains("birth");
    }

    /**
     * Validation result class.
     */
    public static class ValidationResult {
        private String configId;
        private boolean valid;
        private List<String> errors;
        private List<String> warnings;
        private List<String> recommendations;
        private LocalDateTime validatedAt;
        
        // Getters and setters
        public String getConfigId() { return configId; }
        public void setConfigId(String configId) { this.configId = configId; }
        public boolean isValid() { return valid; }
        public void setValid(boolean valid) { this.valid = valid; }
        public List<String> getErrors() { return errors; }
        public void setErrors(List<String> errors) { this.errors = errors; }
        public List<String> getWarnings() { return warnings; }
        public void setWarnings(List<String> warnings) { this.warnings = warnings; }
        public List<String> getRecommendations() { return recommendations; }
        public void setRecommendations(List<String> recommendations) { this.recommendations = recommendations; }
        public LocalDateTime getValidatedAt() { return validatedAt; }
        public void setValidatedAt(LocalDateTime validatedAt) { this.validatedAt = validatedAt; }
    }
}
package com.truist.batch.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * Comprehensive unit tests for EnhancedControlFileGenerator.
 * Tests control file generation, security features, performance optimizations,
 * and validation capabilities.
 */
@ExtendWith(MockitoExtension.class)
class EnhancedControlFileGeneratorTest {

    @Mock
    private com.truist.batch.sqlloader.ControlFileGenerator baseControlFileGenerator;

    @Mock
    private AuditService auditService;

    @InjectMocks
    private EnhancedControlFileGenerator enhancedControlFileGenerator;

    @TempDir
    Path tempDir;

    private Path mockControlFilePath;
    private com.truist.batch.sqlloader.SqlLoaderConfig sampleConfig;

    @BeforeEach
    void setUp() throws IOException {
        // Create a temporary control file for testing
        mockControlFilePath = tempDir.resolve("test_control.ctl");
        Files.writeString(mockControlFilePath, 
            "LOAD DATA\nINFILE 'test.dat'\nINTO TABLE test_table\nFIELDS TERMINATED BY '|'\n(field1, field2, field3)");

        // Set up sample configuration
        sampleConfig = com.truist.batch.sqlloader.SqlLoaderConfig.builder()
                .configId("TEST-CONFIG-123")
                .jobName("TEST_JOB")
                .targetTable("TEST_TABLE")
                .dataFileName("/data/test.dat")
                .controlFileName("test_control.ctl")
                .loadMethod("INSERT")
                .directPath(true)
                .parallelDegree(1)
                .bindSize(256000L)
                .readSize(1048576L)
                .errors(1000)
                .skip(1)
                .rows(64)
                .fieldDelimiter("|")
                .recordDelimiter("\n")
                .stringDelimiter("\"")
                .characterSet("UTF8")
                .trimWhitespace(true)
                .optionalEnclosures(true)
                .resumable(true)
                .resumableTimeout(7200)
                .correlationId("CORR-123")
                .build();
    }

    // ==================== BASIC CONTROL FILE GENERATION TESTS ====================

    @Test
    void testGenerateControlFileFromConfig_Success() throws IOException {
        // Given
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        Path result = enhancedControlFileGenerator.generateControlFileFromConfig("TEST-CONFIG-123", "/data/test.dat");

        // Then
        assertThat(result).isNotNull();
        assertThat(result).exists();
        
        // Verify audit logging
        verify(auditService).logSecurityEvent(
                eq("CONTROL_FILE_GENERATED"),
                anyString(),
                eq("SYSTEM"),
                any(Map.class)
        );

        // Verify content was enhanced with metadata
        String content = Files.readString(result);
        assertThat(content).contains("Generated by Fabric Platform");
        assertThat(content).contains("Configuration ID: TEST-CONFIG-123");
        assertThat(content).contains("LOAD DATA"); // Original content preserved
    }

    @Test
    void testGeneratePipeDelimitedControlFileFromConfig_Success() throws IOException {
        // Given
        when(baseControlFileGenerator.generatePipeDelimitedControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        Path result = enhancedControlFileGenerator.generatePipeDelimitedControlFileFromConfig("TEST-CONFIG-123", "/data/test.dat");

        // Then
        assertThat(result).isNotNull();
        assertThat(result).exists();
        
        String content = Files.readString(result);
        assertThat(content).contains("Generated by Fabric Platform");
        assertThat(content).contains("LOAD DATA");
    }

    @Test
    void testGenerateFixedWidthControlFileFromConfig_Success() throws IOException {
        // Given
        when(baseControlFileGenerator.generateFixedWidthControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        Path result = enhancedControlFileGenerator.generateFixedWidthControlFileFromConfig("TEST-CONFIG-123", "/data/test.dat");

        // Then
        assertThat(result).isNotNull();
        assertThat(result).exists();
        
        String content = Files.readString(result);
        assertThat(content).contains("Generated by Fabric Platform");
    }

    @Test
    void testGenerateControlFile_Exception() throws IOException {
        // Given
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenThrow(new RuntimeException("Generation failed"));

        // When & Then
        assertThatThrownBy(() -> 
            enhancedControlFileGenerator.generateControlFileFromConfig("TEST-CONFIG-123", "/data/test.dat"))
                .isInstanceOf(IOException.class)
                .hasMessageContaining("Control file generation failed");
    }

    // ==================== SECURITY FEATURES TESTS ====================

    @Test
    void testGenerateSecureControlFile_Success() throws IOException {
        // Given
        List<String> piiFields = Arrays.asList("ssn", "social_security_number", "phone_number");
        String encryptionKeyId = "AES256-KEY-001";
        
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        Path result = enhancedControlFileGenerator.generateSecureControlFile(
                "TEST-CONFIG-123", "/data/test.dat", piiFields, encryptionKeyId);

        // Then
        assertThat(result).isNotNull();
        assertThat(result).exists();
        
        // Verify security audit logging
        verify(auditService).logSecurityEvent(
                eq("SECURE_CONTROL_FILE_GENERATED"),
                anyString(),
                eq("SYSTEM"),
                argThat((Map<String, Object> map) -> {
                    return map.containsKey("piiFields") && 
                           map.containsKey("encrypted") && 
                           Boolean.TRUE.equals(map.get("encrypted"));
                })
        );

        String content = Files.readString(result);
        assertThat(content).contains("Security: ENCRYPTION_ENABLED");
    }

    @Test
    void testGenerateSecureControlFile_EmptyPiiFields() throws IOException {
        // Given
        List<String> piiFields = Arrays.asList();
        String encryptionKeyId = "AES256-KEY-001";
        
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        assertThatCode(() -> 
            enhancedControlFileGenerator.generateSecureControlFile(
                "TEST-CONFIG-123", "/data/test.dat", piiFields, encryptionKeyId))
                .doesNotThrowAnyException();
    }

    // ==================== PERFORMANCE OPTIMIZATION TESTS ====================

    @Test
    void testGenerateHighPerformanceControlFile_Success() throws IOException {
        // Given
        int parallelDegree = 4;
        long bindSize = 1048576L; // 1MB
        boolean directPath = true;
        
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        Path result = enhancedControlFileGenerator.generateHighPerformanceControlFile(
                "TEST-CONFIG-123", "/data/test.dat", parallelDegree, bindSize, directPath);

        // Then
        assertThat(result).isNotNull();
        assertThat(result).exists();
        
        String content = Files.readString(result);
        assertThat(content).contains("Performance Profile: HIGH_PERFORMANCE");
    }

    @Test
    void testGenerateHighPerformanceControlFile_StandardPerformance() throws IOException {
        // Given
        int parallelDegree = 1;
        long bindSize = 256000L;
        boolean directPath = false;
        
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        Path result = enhancedControlFileGenerator.generateHighPerformanceControlFile(
                "TEST-CONFIG-123", "/data/test.dat", parallelDegree, bindSize, directPath);

        // Then
        assertThat(result).isNotNull();
        assertThat(result).exists();
        
        String content = Files.readString(result);
        assertThat(content).contains("Performance Profile: STANDARD");
    }

    // ==================== TEMPLATE GENERATION TESTS ====================

    @Test
    void testGenerateEnhancedTemplate_DelimitedFile() {
        // Given
        String targetTable = "CUSTOMER_DATA";
        String fileType = "DELIMITED";
        List<String> columnNames = Arrays.asList("customer_id", "first_name", "last_name", "email", "phone_number");
        Map<String, String> dataTypes = new HashMap<>();
        dataTypes.put("customer_id", "NUMBER");
        dataTypes.put("first_name", "VARCHAR");
        dataTypes.put("last_name", "VARCHAR");
        dataTypes.put("email", "VARCHAR");
        dataTypes.put("phone_number", "VARCHAR");

        // When
        String result = enhancedControlFileGenerator.generateEnhancedTemplate(
                targetTable, fileType, columnNames, dataTypes);

        // Then
        assertThat(result).isNotNull();
        assertThat(result).contains("Target table: CUSTOMER_DATA");
        assertThat(result).contains("File type: DELIMITED");
        assertThat(result).contains("LOAD DATA");
        assertThat(result).contains("INTO TABLE CUSTOMER_DATA");
        assertThat(result).contains("FIELDS TERMINATED BY '|'");
        assertThat(result).contains("customer_id");
        assertThat(result).contains("DECIMAL EXTERNAL"); // NUMBER data type
        assertThat(result).contains("phone_number"); // Should have PII comment
        assertThat(result).contains("PII Field - Consider encryption");
        assertThat(result).contains("DIRECT=TRUE");
        assertThat(result).contains("MULTITHREADING=TRUE");
    }

    @Test
    void testGenerateEnhancedTemplate_FixedWidthFile() {
        // Given
        String targetTable = "TRANSACTION_DATA";
        String fileType = "FIXED_WIDTH";
        List<String> columnNames = Arrays.asList("trans_id", "trans_date", "amount");
        Map<String, String> dataTypes = new HashMap<>();
        dataTypes.put("trans_id", "NUMBER");
        dataTypes.put("trans_date", "DATE");
        dataTypes.put("amount", "NUMBER");

        // When
        String result = enhancedControlFileGenerator.generateEnhancedTemplate(
                targetTable, fileType, columnNames, dataTypes);

        // Then
        assertThat(result).isNotNull();
        assertThat(result).contains("Target table: TRANSACTION_DATA");
        assertThat(result).contains("trans_date DATE \"YYYY-MM-DD HH24:MI:SS\"");
        assertThat(result).contains("amount DECIMAL EXTERNAL");
        assertThat(result).doesNotContain("FIELDS TERMINATED BY"); // Not delimited
    }

    @Test
    void testGenerateEnhancedTemplate_WithTimestampFields() {
        // Given
        String targetTable = "EVENT_LOG";
        String fileType = "DELIMITED";
        List<String> columnNames = Arrays.asList("event_id", "created_at", "updated_at");
        Map<String, String> dataTypes = new HashMap<>();
        dataTypes.put("event_id", "NUMBER");
        dataTypes.put("created_at", "TIMESTAMP");
        dataTypes.put("updated_at", "TIMESTAMP");

        // When
        String result = enhancedControlFileGenerator.generateEnhancedTemplate(
                targetTable, fileType, columnNames, dataTypes);

        // Then
        assertThat(result).contains("created_at TIMESTAMP \"YYYY-MM-DD HH24:MI:SS.FF\"");
        assertThat(result).contains("updated_at TIMESTAMP \"YYYY-MM-DD HH24:MI:SS.FF\"");
    }

    @Test
    void testGenerateEnhancedTemplate_EmptyColumnList() {
        // Given
        String targetTable = "EMPTY_TABLE";
        String fileType = "DELIMITED";
        List<String> columnNames = Arrays.asList();
        Map<String, String> dataTypes = new HashMap<>();

        // When
        String result = enhancedControlFileGenerator.generateEnhancedTemplate(
                targetTable, fileType, columnNames, dataTypes);

        // Then
        assertThat(result).isNotNull();
        assertThat(result).contains("Target table: EMPTY_TABLE");
        assertThat(result).contains("(\n)"); // Empty field list
    }

    // ==================== VALIDATION TESTS ====================

    @Test
    void testValidateControlFileAgainstConfig_ValidFile() {
        // Given
        String validControlFile = """
                LOAD DATA
                INFILE 'test.dat'
                INTO TABLE test_table
                FIELDS TERMINATED BY '|'
                BADFILE 'test.bad'
                (field1, field2, field3)
                """;

        // When
        EnhancedControlFileGenerator.ValidationResult result = 
                enhancedControlFileGenerator.validateControlFileAgainstConfig("TEST-CONFIG-123", validControlFile);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getConfigId()).isEqualTo("TEST-CONFIG-123");
        assertThat(result.isValid()).isTrue();
        assertThat(result.getErrors()).isEmpty();
    }

    @Test
    void testValidateControlFileAgainstConfig_InvalidFile() {
        // Given
        String invalidControlFile = "This is not a valid control file";

        // When
        EnhancedControlFileGenerator.ValidationResult result = 
                enhancedControlFileGenerator.validateControlFileAgainstConfig("TEST-CONFIG-123", invalidControlFile);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getConfigId()).isEqualTo("TEST-CONFIG-123");
        assertThat(result.isValid()).isFalse();
        assertThat(result.getErrors()).isNotEmpty();
        assertThat(result.getErrors()).contains("Missing LOAD DATA statement");
        assertThat(result.getErrors()).contains("Missing INTO TABLE clause");
    }

    @Test
    void testValidateControlFileAgainstConfig_WithWarningsAndRecommendations() {
        // Given
        String controlFileWithIssues = """
                LOAD DATA
                INFILE 'test.dat'
                INTO TABLE test_table
                FIELDS TERMINATED BY '|'
                (field1, field2, field3)
                """;

        // When
        EnhancedControlFileGenerator.ValidationResult result = 
                enhancedControlFileGenerator.validateControlFileAgainstConfig("TEST-CONFIG-123", controlFileWithIssues);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.isValid()).isTrue(); // No errors, just warnings
        assertThat(result.getWarnings()).isNotEmpty();
        assertThat(result.getRecommendations()).isNotEmpty();
        assertThat(result.getRecommendations()).anyMatch(rec -> 
                rec.contains("Enable direct path loading"));
    }

    @Test
    void testValidateControlFileAgainstConfig_Exception() {
        // Given
        String controlFile = "LOAD DATA INTO TABLE test";

        // When
        assertThatCode(() -> 
                enhancedControlFileGenerator.validateControlFileAgainstConfig(null, controlFile))
                .doesNotThrowAnyException(); // Should handle gracefully
    }

    // ==================== PII DETECTION TESTS ====================

    @Test
    void testIsPotentialPiiField_PositiveCases() {
        // Test various PII field patterns
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("ssn")).isTrue();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("social_security_number")).isTrue();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("PHONE_NUMBER")).isTrue();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("email_address")).isTrue();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("home_address")).isTrue();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("customer_name")).isTrue();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("date_of_birth")).isTrue();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("birth_date")).isTrue();
    }

    @Test
    void testIsPotentialPiiField_NegativeCases() {
        // Test non-PII field patterns
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("customer_id")).isFalse();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("transaction_amount")).isFalse();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("created_date")).isFalse();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("status_code")).isFalse();
        assertThat(enhancedControlFileGenerator.isPotentialPiiField("region")).isFalse();
    }

    // ==================== METADATA ENHANCEMENT TESTS ====================

    @Test
    void testMetadataEnhancement_PerformanceProfiles() throws IOException {
        // Given
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenReturn(mockControlFilePath);

        // Test HIGH_PERFORMANCE profile
        Path highPerfResult = enhancedControlFileGenerator.generateHighPerformanceControlFile(
                "TEST-CONFIG-123", "/data/test.dat", 4, 1048576L, true);
        
        String highPerfContent = Files.readString(highPerfResult);
        assertThat(highPerfContent).contains("Performance Profile: HIGH_PERFORMANCE");

        // Test OPTIMIZED profile
        Path optimizedResult = enhancedControlFileGenerator.generateControlFileFromConfig(
                "TEST-CONFIG-123", "/data/test.dat");
        
        String optimizedContent = Files.readString(optimizedResult);
        assertThat(optimizedContent).contains("Performance Profile: OPTIMIZED"); // Direct path enabled by default
    }

    @Test
    void testMetadataEnhancement_SecuritySettings() throws IOException {
        // Given
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        Path result = enhancedControlFileGenerator.generateSecureControlFile(
                "TEST-CONFIG-123", "/data/test.dat", 
                Arrays.asList("ssn", "phone"), "AES256-KEY-001");

        // Then
        String content = Files.readString(result);
        assertThat(content).contains("Security: ENCRYPTION_ENABLED");
        assertThat(content).contains("Configuration ID: TEST-CONFIG-123");
        assertThat(content).contains("Generated by Fabric Platform");
    }

    // ==================== ERROR HANDLING AND EDGE CASES ====================

    @Test
    void testGenerateControlFile_InvalidConfigId() throws IOException {
        // When & Then
        assertThatThrownBy(() -> 
            enhancedControlFileGenerator.generateControlFileFromConfig(null, "/data/test.dat"))
                .isInstanceOf(IOException.class);
    }

    @Test
    void testGenerateControlFile_InvalidDataPath() throws IOException {
        // When & Then
        assertThatThrownBy(() -> 
            enhancedControlFileGenerator.generateControlFileFromConfig("TEST-CONFIG-123", null))
                .isInstanceOf(IOException.class);
    }

    @Test
    void testGenerateTemplate_ExceptionHandling() {
        // Given
        List<String> columnNames = Arrays.asList("field1");
        when(baseControlFileGenerator.generateTemplateControlFile(anyString(), any()))
                .thenReturn("Fallback template");

        // When - pass invalid parameters that might cause internal exception
        String result = enhancedControlFileGenerator.generateEnhancedTemplate(
                null, "INVALID_TYPE", columnNames, new HashMap<>());

        // Then - should fallback gracefully
        assertThat(result).contains("Template control file");
    }

    // ==================== INTEGRATION WITH BASE GENERATOR ====================

    @Test
    void testIntegrationWithBaseGenerator_CallDelegation() throws IOException {
        // Given
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenReturn(mockControlFilePath);
        when(baseControlFileGenerator.generatePipeDelimitedControlFile(any()))
                .thenReturn(mockControlFilePath);
        when(baseControlFileGenerator.generateFixedWidthControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        enhancedControlFileGenerator.generateControlFileFromConfig("TEST-CONFIG-123", "/data/test.dat");
        enhancedControlFileGenerator.generatePipeDelimitedControlFileFromConfig("TEST-CONFIG-123", "/data/test.dat");
        enhancedControlFileGenerator.generateFixedWidthControlFileFromConfig("TEST-CONFIG-123", "/data/test.dat");

        // Then
        verify(baseControlFileGenerator).generateControlFile(any());
        verify(baseControlFileGenerator).generatePipeDelimitedControlFile(any());
        verify(baseControlFileGenerator).generateFixedWidthControlFile(any());
    }

    @Test
    void testConfigurationCreation() throws IOException {
        // Given
        when(baseControlFileGenerator.generateControlFile(any()))
                .thenReturn(mockControlFilePath);

        // When
        Path result = enhancedControlFileGenerator.generateControlFileFromConfig("TEST-CONFIG-123", "/data/test.dat");

        // Then
        verify(baseControlFileGenerator).generateControlFile(argThat(config -> {
            assertThat(config.getConfigId()).isEqualTo("TEST-CONFIG-123");
            assertThat(config.getJobName()).isEqualTo("SAMPLE_JOB");
            assertThat(config.getDataFileName()).isEqualTo("/data/test.dat");
            assertThat(config.getDirectPath()).isTrue();
            assertThat(config.getCorrelationId()).startsWith("FABRIC-TEST-CONFIG-123-");
            return true;
        }));
    }
}
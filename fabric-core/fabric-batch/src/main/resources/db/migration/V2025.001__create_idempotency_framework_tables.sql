-- ============================================================================
-- FABRIC PLATFORM IDEMPOTENCY FRAMEWORK DATABASE SCHEMA
-- Version: V2025.001
-- Created: August 2025
-- Description: Enterprise-grade idempotency framework for batch jobs and API requests
-- Schema: CM3INT (following existing Fabric Platform patterns)
-- ============================================================================

-- Core idempotency key management table
CREATE TABLE CM3INT.fabric_idempotency_keys (
    idempotency_key         VARCHAR2(128) PRIMARY KEY,
    source_system          VARCHAR2(50) NOT NULL,
    job_name               VARCHAR2(50) NOT NULL,
    transaction_id         VARCHAR2(100),
    file_hash              VARCHAR2(64), -- SHA-256 of input file
    request_hash           VARCHAR2(64), -- SHA-256 of request parameters
    processing_state       VARCHAR2(20) NOT NULL CHECK (processing_state IN 
        ('STARTED', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'EXPIRED')),
    request_payload        CLOB,
    response_payload       CLOB,
    error_details          CLOB,
    correlation_id         VARCHAR2(100) NOT NULL,
    ttl_seconds           NUMBER DEFAULT 86400, -- 24 hours default
    created_date          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_date        TIMESTAMP,
    expires_at            TIMESTAMP,
    retry_count           NUMBER DEFAULT 0,
    max_retries          NUMBER DEFAULT 3,
    created_by           VARCHAR2(50) NOT NULL,
    last_accessed        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processing_node      VARCHAR2(50), -- For distributed processing
    lock_version         NUMBER DEFAULT 0, -- Optimistic locking
    CONSTRAINT uk_idem_composite UNIQUE(source_system, job_name, transaction_id)
);

-- Processing state audit trail table
CREATE TABLE CM3INT.fabric_idempotency_audit (
    audit_id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idempotency_key       VARCHAR2(128) NOT NULL,
    old_state            VARCHAR2(20),
    new_state            VARCHAR2(20),
    state_change_reason  VARCHAR2(500),
    changed_by           VARCHAR2(50) NOT NULL,
    change_date          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processing_context   CLOB, -- JSON metadata
    client_ip            VARCHAR2(45),
    user_agent           VARCHAR2(1000),
    device_fingerprint   VARCHAR2(100),
    session_id           VARCHAR2(100),
    business_context     VARCHAR2(500),
    CONSTRAINT fk_idem_audit_key FOREIGN KEY (idempotency_key) 
        REFERENCES CM3INT.fabric_idempotency_keys(idempotency_key) ON DELETE CASCADE
);

-- Idempotency configuration per job type
CREATE TABLE CM3INT.fabric_idempotency_config (
    config_id            VARCHAR2(100) PRIMARY KEY,
    config_type          VARCHAR2(20) NOT NULL CHECK (config_type IN ('BATCH_JOB', 'API_ENDPOINT')),
    target_pattern       VARCHAR2(500) NOT NULL, -- job name pattern or endpoint pattern
    enabled              VARCHAR2(1) DEFAULT 'Y' CHECK (enabled IN ('Y', 'N')),
    ttl_hours           NUMBER DEFAULT 24,
    max_retries         NUMBER DEFAULT 3,
    key_generation_strategy VARCHAR2(50) DEFAULT 'AUTO_GENERATED',
    store_request_payload VARCHAR2(1) DEFAULT 'Y' CHECK (store_request_payload IN ('Y', 'N')),
    store_response_payload VARCHAR2(1) DEFAULT 'Y' CHECK (store_response_payload IN ('Y', 'N')),
    cleanup_policy       VARCHAR2(20) DEFAULT 'TTL_BASED' CHECK (cleanup_policy IN ('TTL_BASED', 'MANUAL', 'COUNT_BASED')),
    encryption_required  VARCHAR2(1) DEFAULT 'N' CHECK (encryption_required IN ('Y', 'N')),
    compliance_flags     VARCHAR2(100), -- SOX, PCI, GDPR flags
    description          VARCHAR2(1000),
    created_by           VARCHAR2(50) NOT NULL,
    created_date         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by          VARCHAR2(50),
    modified_date        TIMESTAMP,
    version              NUMBER DEFAULT 1
);

-- Performance optimization indexes
CREATE INDEX idx_idem_keys_correlation ON CM3INT.fabric_idempotency_keys(correlation_id);
CREATE INDEX idx_idem_keys_job_system ON CM3INT.fabric_idempotency_keys(source_system, job_name);
CREATE INDEX idx_idem_keys_state ON CM3INT.fabric_idempotency_keys(processing_state);
CREATE INDEX idx_idem_keys_expires ON CM3INT.fabric_idempotency_keys(expires_at);
CREATE INDEX idx_idem_keys_created ON CM3INT.fabric_idempotency_keys(created_date);
CREATE INDEX idx_idem_keys_node ON CM3INT.fabric_idempotency_keys(processing_node);

CREATE INDEX idx_idem_audit_key ON CM3INT.fabric_idempotency_audit(idempotency_key);
CREATE INDEX idx_idem_audit_timestamp ON CM3INT.fabric_idempotency_audit(change_date);
CREATE INDEX idx_idem_audit_user ON CM3INT.fabric_idempotency_audit(changed_by);

CREATE INDEX idx_idem_config_pattern ON CM3INT.fabric_idempotency_config(config_type, target_pattern);
CREATE INDEX idx_idem_config_enabled ON CM3INT.fabric_idempotency_config(enabled);

-- Automated cleanup procedure
CREATE OR REPLACE PROCEDURE CM3INT.cleanup_expired_idempotency_records AS
    v_cleanup_count NUMBER;
    v_audit_cleanup_count NUMBER;
BEGIN
    -- Cleanup expired idempotency records
    DELETE FROM CM3INT.fabric_idempotency_keys 
    WHERE expires_at < CURRENT_TIMESTAMP;
    
    v_cleanup_count := SQL%ROWCOUNT;
    
    -- Cleanup old audit records (90 days retention)
    DELETE FROM CM3INT.fabric_idempotency_audit 
    WHERE change_date < CURRENT_TIMESTAMP - INTERVAL '90' DAY;
    
    v_audit_cleanup_count := SQL%ROWCOUNT;
    
    -- Log cleanup activity
    INSERT INTO CM3INT.fabric_idempotency_audit (
        idempotency_key, 
        new_state, 
        state_change_reason, 
        changed_by,
        processing_context
    ) VALUES (
        'SYSTEM_CLEANUP', 
        'CLEANUP_COMPLETED', 
        'Automated cleanup of expired records', 
        'SYSTEM',
        JSON_OBJECT(
            'records_cleaned' VALUE v_cleanup_count,
            'audit_records_cleaned' VALUE v_audit_cleanup_count
        )
    );
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        -- Log error for monitoring
        INSERT INTO CM3INT.fabric_idempotency_audit (
            idempotency_key, 
            new_state, 
            state_change_reason, 
            changed_by,
            processing_context
        ) VALUES (
            'SYSTEM_CLEANUP', 
            'CLEANUP_FAILED', 
            'Cleanup failed: ' || SQLERRM, 
            'SYSTEM',
            JSON_OBJECT('error_code' VALUE SQLCODE, 'error_message' VALUE SQLERRM)
        );
        COMMIT;
        RAISE;
END;
/

-- Schedule cleanup job (runs every 4 hours)
BEGIN
    DBMS_SCHEDULER.create_job(
        job_name => 'IDEMPOTENCY_CLEANUP_JOB',
        job_type => 'PLSQL_BLOCK',
        job_action => 'BEGIN CM3INT.cleanup_expired_idempotency_records; END;',
        start_date => CURRENT_TIMESTAMP,
        repeat_interval => 'FREQ=HOURLY; INTERVAL=4',
        enabled => TRUE,
        comments => 'Automated cleanup of expired idempotency records'
    );
EXCEPTION
    WHEN OTHERS THEN
        -- Job may already exist
        IF SQLCODE != -27477 THEN
            RAISE;
        END IF;
END;
/

-- Insert default configuration entries
INSERT INTO CM3INT.fabric_idempotency_config (
    config_id, config_type, target_pattern, enabled, ttl_hours, max_retries,
    key_generation_strategy, store_request_payload, store_response_payload,
    cleanup_policy, encryption_required, compliance_flags, description,
    created_by, created_date
) VALUES (
    'DEFAULT_BATCH_JOB', 'BATCH_JOB', '*', 'Y', 24, 3,
    'AUTO_GENERATED', 'Y', 'Y', 
    'TTL_BASED', 'N', 'SOX,AUDIT', 'Default configuration for all batch jobs',
    'SYSTEM', CURRENT_TIMESTAMP
);

INSERT INTO CM3INT.fabric_idempotency_config (
    config_id, config_type, target_pattern, enabled, ttl_hours, max_retries,
    key_generation_strategy, store_request_payload, store_response_payload,
    cleanup_policy, encryption_required, compliance_flags, description,
    created_by, created_date
) VALUES (
    'DEFAULT_API_ENDPOINT', 'API_ENDPOINT', '/api/*', 'Y', 1, 3,
    'AUTO_GENERATED', 'Y', 'Y', 
    'TTL_BASED', 'N', 'SOX,AUDIT', 'Default configuration for all API endpoints',
    'SYSTEM', CURRENT_TIMESTAMP
);

-- Create sequence for correlation IDs
CREATE SEQUENCE CM3INT.seq_correlation_id
    START WITH 1000000
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

COMMIT;

-- Add comments to tables and columns for documentation
COMMENT ON TABLE CM3INT.fabric_idempotency_keys IS 'Core idempotency key management for batch jobs and API requests';
COMMENT ON COLUMN CM3INT.fabric_idempotency_keys.idempotency_key IS 'Unique identifier for idempotent operation';
COMMENT ON COLUMN CM3INT.fabric_idempotency_keys.source_system IS 'Source system identifier (e.g., HR, MTG, SHAW)';
COMMENT ON COLUMN CM3INT.fabric_idempotency_keys.job_name IS 'Batch job name or API endpoint identifier';
COMMENT ON COLUMN CM3INT.fabric_idempotency_keys.processing_state IS 'Current processing state of the operation';
COMMENT ON COLUMN CM3INT.fabric_idempotency_keys.correlation_id IS 'Correlation ID for tracing across systems';

COMMENT ON TABLE CM3INT.fabric_idempotency_audit IS 'Audit trail for idempotency state changes';
COMMENT ON COLUMN CM3INT.fabric_idempotency_audit.processing_context IS 'JSON metadata about processing context';

COMMENT ON TABLE CM3INT.fabric_idempotency_config IS 'Configuration settings for idempotency behavior';
COMMENT ON COLUMN CM3INT.fabric_idempotency_config.target_pattern IS 'Pattern matching job names or endpoint paths';
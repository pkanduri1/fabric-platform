// src/pages/TemplateConfigurationPage/TemplateConfigurationPage.tsx
import React, { useState, useEffect } from 'react';
import {
    Box,
    Card,
    CardContent,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Button,
    Typography,
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableRow,
    TextField,
    Chip,
    Alert,
    CircularProgress,
    Container,
    Stepper,
    Step,
    StepLabel,
    Grid,
    Paper
} from '@mui/material';
import { Download, Upload, Save, Settings, OpenInNew } from '@mui/icons-material';
import { useConfigurationContext } from '../../contexts/ConfigurationContext';
import { templateApiService } from '../../services/api/templateApi';
import { FileTypeTemplate, FieldTemplate, FieldMappingConfig, TemplateToConfigurationResult } from '../../types/template';
import { useNavigate } from 'react-router-dom';

const steps = ['Select Template', 'Configure Mappings', 'Generate & Save'];

export const TemplateConfigurationPage: React.FC = () => {
    const [activeStep, setActiveStep] = useState(0);
    const [fileTypes, setFileTypes] = useState<FileTypeTemplate[]>([]);
    const [selectedFileType, setSelectedFileType] = useState('');
    const [transactionTypes, setTransactionTypes] = useState<string[]>([]);
    const [selectedTransactionType, setSelectedTransactionType] = useState('');
    const [templateFields, setTemplateFields] = useState<FieldTemplate[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [templateJobName, setTemplateJobName] = useState('');
    const [success, setSuccess] = useState<string | null>(null);
    const [generatedConfig, setGeneratedConfig] = useState<any>(null);

    const navigate = useNavigate();

    const {
        selectedSourceSystem,
        selectedJob,
        saveConfiguration
    } = useConfigurationContext();

    // Load file types on mount
    useEffect(() => {
        fetchFileTypes();
    }, []);

    // Load transaction types when file type changes
    useEffect(() => {
        if (selectedFileType) {
            fetchTransactionTypes(selectedFileType);
        }
    }, [selectedFileType]);

    // Load template fields when both are selected
    useEffect(() => {
        if (selectedFileType && selectedTransactionType) {
            fetchTemplateFields(selectedFileType, selectedTransactionType);
            setActiveStep(1);
        }
    }, [selectedFileType, selectedTransactionType]);

    // Auto-generate job name when template selection changes
    useEffect(() => {
        if (selectedFileType && selectedTransactionType) {
            const autoGeneratedJobName = `${selectedFileType}-${selectedTransactionType}`;
            setTemplateJobName(autoGeneratedJobName);
            console.log('Auto-generated job name:', autoGeneratedJobName);
        } else {
            setTemplateJobName('');
        }
    }, [selectedFileType, selectedTransactionType]);

    const fetchFileTypes = async () => {
        try {
            setLoading(true);
            const types = await templateApiService.getFileTypes();
            setFileTypes(
                types.map((t: any) => ({
                    ...t,
                    recordLength: t.recordLength ?? 0
                }))
            );
        } catch (error) {
            setError('Failed to load file types');
        } finally {
            setLoading(false);
        }
    };

    const fetchTransactionTypes = async (fileType: string) => {
        try {
            const data = await templateApiService.getTransactionTypes(fileType);
            setTransactionTypes(data);
            if (data.length === 1) {
                setSelectedTransactionType(data[0]);
            }
        } catch (error) {
            console.error('Error fetching transaction types:', error);
        }
    };

    const fetchTemplateFields = async (fileType: string, transactionType: string) => {
        setLoading(true);
        try {
            const data = await templateApiService.getTemplateFields(fileType, transactionType);
            setTemplateFields(data);
            setError(null);
        } catch (error) {
            setError('Failed to load template fields');
            console.error('Error fetching template fields:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleSourceFieldChange = (fieldIndex: number, sourceField: string) => {
        const updated = [...templateFields];
        updated[fieldIndex].sourceField = sourceField;
        setTemplateFields(updated);
    };

    const handleTransformationChange = (fieldIndex: number, transformationType: string) => {
        const updated = [...templateFields];
        updated[fieldIndex].transformationType = transformationType as any;
        setTemplateFields(updated);
    };

    const generateConfiguration = async () => {
        // Validation checks
        if (!selectedFileType) {
            setError('Please select a file type');
            return;
        }

        if (!selectedTransactionType) {
            setError('Please select a transaction type');
            return;
        }

        if (!selectedSourceSystem) {
            setError('Please select a source system from the sidebar');
            return;
        }

        const jobName = templateJobName || (selectedJob?.name || selectedJob?.jobName);
        if (!jobName) {
            setError('Please ensure a job name is available');
            return;
        }

        try {
            setLoading(true);
            setError(null);

            console.log('üöÄ Starting configuration generation...', {
                fileType: selectedFileType,
                transactionType: selectedTransactionType,
                sourceSystem: selectedSourceSystem.id,
                jobName: jobName
            });

            // Step 1: Generate configuration from template
            let configWithMetadata;

            try {
                configWithMetadata = await templateApiService.createConfigurationFromTemplateWithMetadata(
                    selectedFileType,
                    selectedTransactionType,
                    selectedSourceSystem.id,
                    jobName
                );

                console.log('‚úÖ Template configuration generated:', configWithMetadata);
            } catch (templateError) {
                console.error('‚ùå Template generation failed:', templateError);
                const errorMsg = templateError instanceof Error ? templateError.message : 'Unknown error';
                throw new Error(`Failed to generate template configuration: ${errorMsg}`);
            }

            // Step 2: Merge user customizations from the UI
            const enhancedFields = configWithMetadata.fields.map((fieldMapping: any, index: number) => {
                const userCustomization = templateFields[index];

                return {
                    ...fieldMapping,
                    sourceField: userCustomization?.sourceField || fieldMapping.sourceField || '',
                    transformationType: userCustomization?.transformationType || fieldMapping.transformationType || 'source'
                };
            });

            const finalConfiguration = {
                ...configWithMetadata,
                fields: enhancedFields
            };

            console.log('‚úÖ Final configuration prepared:', finalConfiguration);
            setGeneratedConfig(finalConfiguration);

            // Step 3: Simple save attempt
            try {
    console.log('üîÑ Saving template configuration...', finalConfiguration);
    
    // Create configuration in the format expected by backend
    const configForBackend = {
        sourceSystem: finalConfiguration.sourceSystem,
        jobName: finalConfiguration.jobName,
        transactionType: finalConfiguration.transactionType, // "200"
        description: finalConfiguration.description || `Generated from ${selectedFileType}/${selectedTransactionType} template`,
        fieldMappings: finalConfiguration.fields.map((field: any) => ({
            fieldName: field.fieldName,
            sourceField: field.sourceField || '',
            targetField: field.targetField,
            targetPosition: field.targetPosition,
            length: field.length,
            dataType: field.dataType,
            transformationType: field.transformationType,
            transactionType: field.transactionType || finalConfiguration.transactionType,
            value: field.value,
            defaultValue: field.defaultValue,
            format: field.format
        })),
        createdBy: 'template-user',
        version: 1
    };

    console.log('üì¶ Sending to backend:', configForBackend);

    // Call the backend API directly instead of context save
    const response = await fetch('http://localhost:8080/api/config/mappings/save', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(configForBackend)
    });

    if (response.ok) {
        const result = await response.text();
        console.log('‚úÖ Configuration saved successfully! ID:', result);
        
        setActiveStep(2);
        const { templateMetadata } = configWithMetadata;
        const successMessage = `‚úÖ Configuration saved successfully!

Template: ${templateMetadata.fileType}/${templateMetadata.transactionType}
Job Name: ${jobName}
Transaction Type: ${finalConfiguration.transactionType}
Fields saved: ${finalConfiguration.fields.length}
Configuration ID: ${result}

üéâ Configuration saved to database!`;

        setSuccess(successMessage);
        setError(null);
    } else {
        throw new Error(`Backend save failed: ${response.status} ${response.statusText}`);
    }

            } catch (saveError) {
                console.warn('‚ö†Ô∏è Save operation failed:', saveError);
                
                // Show template generation success with next steps
                setActiveStep(2);
                const { templateMetadata } = configWithMetadata;
                const successMessage = `‚úÖ Template configuration generated successfully!

Template: ${templateMetadata.fileType}/${templateMetadata.transactionType}
Job Name: ${jobName}
Source System: ${selectedSourceSystem.name}
Fields prepared: ${enhancedFields.length}

üìã Next Steps:
1. Click "Navigate to Manual Config" below to set up the job
2. The template structure is ready to be applied
3. You can copy the field mappings shown below

üí° Template generation was successful - just need to set up the job context for saving.`;

                setSuccess(successMessage);
                setError(null);
            }

        } catch (error) {
            console.error('‚ùå Configuration generation failed:', error);
            
            const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
            setError(`Failed to generate configuration: ${errorMessage}`);
            setActiveStep(1);
            
        } finally {
            setLoading(false);
            console.log('üèÅ Configuration generation process completed');
        }
    };

    const navigateToManualConfig = () => {
        if (selectedSourceSystem && templateJobName) {
            navigate(`/configuration/${selectedSourceSystem.id}/${templateJobName}`);
        }
    };

    const copyConfigToClipboard = () => {
        if (generatedConfig) {
            const configText = JSON.stringify(generatedConfig, null, 2);
            navigator.clipboard.writeText(configText).then(() => {
                alert('Configuration copied to clipboard!');
            }).catch(() => {
                alert('Failed to copy to clipboard');
            });
        }
    };

    return (
        <Container maxWidth="xl" sx={{ py: 3 }}>
            <Typography variant="h4" gutterBottom sx={{ color: 'primary.main', mb: 3 }}>
                Template-Based Configuration
            </Typography>

            {/* Stepper */}
            <Paper sx={{ p: 2, mb: 3 }}>
                <Stepper activeStep={activeStep} alternativeLabel>
                    {steps.map((label) => (
                        <Step key={label}>
                            <StepLabel>{label}</StepLabel>
                        </Step>
                    ))}
                </Stepper>
            </Paper>

            {/* Error Alert */}
            {error && (
                <Alert
                    severity="error"
                    sx={{ mb: 3 }}
                    onClose={() => setError(null)}
                    action={
                        <Button color="inherit" size="small" onClick={() => setError(null)}>
                            DISMISS
                        </Button>
                    }
                >
                    <Typography variant="body2">
                        <strong>Error:</strong> {error}
                    </Typography>
                    <Typography variant="caption" sx={{ mt: 1, display: 'block' }}>
                        Check the browser console for detailed error information.
                    </Typography>
                </Alert>
            )}

            {/* Success Alert */}
            {success && (
                <Alert
                    severity="success"
                    sx={{ mb: 3 }}
                    onClose={() => setSuccess(null)}
                    action={
                        <Box sx={{ display: 'flex', gap: 1 }}>
                            {generatedConfig && (
                                <>
                                    <Button 
                                        color="inherit" 
                                        size="small" 
                                        onClick={navigateToManualConfig}
                                        startIcon={<OpenInNew />}
                                    >
                                        Navigate to Manual Config
                                    </Button>
                                    <Button 
                                        color="inherit" 
                                        size="small" 
                                        onClick={copyConfigToClipboard}
                                    >
                                        Copy Config
                                    </Button>
                                </>
                            )}
                            <Button color="inherit" size="small" onClick={() => setSuccess(null)}>
                                DISMISS
                            </Button>
                        </Box>
                    }
                >
                    <Typography variant="body2" sx={{ whiteSpace: 'pre-line' }}>
                        {success}
                    </Typography>
                </Alert>
            )}

            {/* Step 1: Template Selection */}
            <Card sx={{ mb: 3 }}>
                <CardContent>
                    <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Settings /> 1. Select Template
                    </Typography>

                    <Grid container spacing={2}>
                        <Grid item xs={12} md={3}>
                            <FormControl fullWidth>
                                <InputLabel>File Type</InputLabel>
                                <Select
                                    value={selectedFileType}
                                    onChange={(e) => setSelectedFileType(e.target.value)}
                                    label="File Type"
                                    disabled={loading}
                                >
                                    {fileTypes.map((ft) => (
                                        <MenuItem key={ft.fileType} value={ft.fileType}>
                                            {ft.fileType} - {ft.description}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </Grid>

                        <Grid item xs={12} md={3}>
                            <FormControl fullWidth>
                                <InputLabel>Transaction Type</InputLabel>
                                <Select
                                    value={selectedTransactionType}
                                    onChange={(e) => setSelectedTransactionType(e.target.value)}
                                    label="Transaction Type"
                                    disabled={!selectedFileType || loading}
                                >
                                    {transactionTypes.map((tt) => (
                                        <MenuItem key={tt} value={tt}>
                                            {tt}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </Grid>

                        <Grid item xs={12} md={3}>
                            <TextField
                                fullWidth
                                label="Source System"
                                value={selectedSourceSystem?.name || 'Select from sidebar'}
                                disabled
                                helperText="Selected from navigation"
                            />
                        </Grid>

                        <Grid item xs={12} md={3}>
                            <TextField
                                fullWidth
                                size="small"
                                label="Job Name"
                                value={templateJobName}
                                onChange={(e) => setTemplateJobName(e.target.value)}
                                disabled={!selectedFileType || !selectedTransactionType}
                                helperText={
                                    selectedFileType && selectedTransactionType
                                        ? "Auto-generated from template (editable)"
                                        : "Select template to generate job name"
                                }
                            />
                        </Grid>
                    </Grid>

                    {selectedFileType && selectedTransactionType && templateJobName && (
                        <Box sx={{ mt: 2, p: 2, bgcolor: 'primary.main', color: 'primary.contrastText', borderRadius: 1 }}>
                            <Typography variant="body2">
                                ‚úì Selected: {selectedFileType} - {selectedTransactionType} ‚Üí Job: {templateJobName}
                            </Typography>
                        </Box>
                    )}
                </CardContent>
            </Card>

            {/* Step 2: Template Fields */}
            {selectedFileType && selectedTransactionType && (
                <Card sx={{ mb: 3 }}>
                    <CardContent>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                            <Typography variant="h6">
                                2. Configure Field Mappings
                            </Typography>
                            <Chip
                                label={`${templateFields.length} fields`}
                                color="primary"
                                variant="outlined"
                            />
                        </Box>

                        <Alert severity="info" sx={{ mb: 2 }}>
                            Target structure is pre-configured from template. Only specify source fields and transformation logic.
                        </Alert>

                        {loading ? (
                            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                                <CircularProgress />
                            </Box>
                        ) : (
                            <Box sx={{ overflowX: 'auto' }}>
                                <Table size="small">
                                    <TableHead>
                                        <TableRow>
                                            <TableCell>Position</TableCell>
                                            <TableCell>Target Field</TableCell>
                                            <TableCell>Length</TableCell>
                                            <TableCell>Data Type</TableCell>
                                            <TableCell>Format</TableCell>
                                            <TableCell>Source Field</TableCell>
                                            <TableCell>Transformation</TableCell>
                                        </TableRow>
                                    </TableHead>
                                    <TableBody>
                                        {templateFields.map((field, index) => (
                                            <TableRow key={field.fieldName} hover>
                                                <TableCell align="center">
                                                    <Chip size="small" label={field.targetPosition} />
                                                </TableCell>
                                                <TableCell>
                                                    <Typography variant="body2" fontWeight="bold">
                                                        {field.fieldName}
                                                    </Typography>
                                                    {field.required === 'Y' && (
                                                        <Chip size="small" label="Required" color="error" sx={{ ml: 1 }} />
                                                    )}
                                                </TableCell>
                                                <TableCell>{field.length}</TableCell>
                                                <TableCell>
                                                    <Chip size="small" label={field.dataType} variant="outlined" />
                                                </TableCell>
                                                <TableCell>{field.format || '-'}</TableCell>
                                                <TableCell>
                                                    <TextField
                                                        size="small"
                                                        placeholder="Source field name"
                                                        value={field.sourceField || ''}
                                                        onChange={(e) => handleSourceFieldChange(index, e.target.value)}
                                                        sx={{ width: 150 }}
                                                    />
                                                </TableCell>
                                                <TableCell>
                                                    <Select
                                                        size="small"
                                                        value={field.transformationType || 'source'}
                                                        onChange={(e) => handleTransformationChange(index, e.target.value)}
                                                        sx={{ width: 120 }}
                                                    >
                                                        <MenuItem value="source">Source</MenuItem>
                                                        <MenuItem value="constant">Constant</MenuItem>
                                                        <MenuItem value="composite">Composite</MenuItem>
                                                        <MenuItem value="conditional">Conditional</MenuItem>
                                                    </Select>
                                                </TableCell>
                                            </TableRow>
                                        ))}
                                    </TableBody>
                                </Table>
                            </Box>
                        )}
                    </CardContent>
                </Card>
            )}

            {/* Step 3: Actions */}
            {templateFields.length > 0 && (
                <Card>
                    <CardContent>
                        <Typography variant="h6" gutterBottom>
                            3. Generate Configuration
                        </Typography>

                        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                            <Button
                                variant="contained"
                                startIcon={loading ? <CircularProgress size={20} /> : <Save />}
                                onClick={generateConfiguration}
                                disabled={loading || !selectedSourceSystem || !templateJobName}
                            >
                                Generate & Save Configuration
                            </Button>

                            <Button
                                variant="outlined"
                                startIcon={<Download />}
                                disabled={loading}
                            >
                                Export Template
                            </Button>

                            <Button
                                variant="outlined"
                                startIcon={<Upload />}
                                disabled={loading}
                            >
                                Import Mappings
                            </Button>
                        </Box>

                        {(!selectedSourceSystem || !templateJobName) && (
                            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                                {!selectedSourceSystem
                                    ? "Please select a source system from the sidebar navigation."
                                    : "Please select a template to generate a job name."
                                }
                            </Typography>
                        )}
                    </CardContent>
                </Card>
            )}

            {/* Generated Configuration Display */}
            {generatedConfig && activeStep === 2 && (
                <Card sx={{ mt: 3 }}>
                    <CardContent>
                        <Typography variant="h6" gutterBottom>
                            Generated Configuration Summary
                        </Typography>
                        
                        <Box sx={{ bgcolor: 'grey.100', p: 2, borderRadius: 1, mb: 2 }}>
                            <Typography variant="body2">
                                <strong>Job:</strong> {generatedConfig.jobName}<br/>
                                <strong>Source System:</strong> {generatedConfig.sourceSystem}<br/>
                                <strong>Transaction Type:</strong> {generatedConfig.transactionType}<br/>
                                <strong>Fields:</strong> {generatedConfig.fields?.length || 0}
                            </Typography>
                        </Box>

                        <Typography variant="subtitle2" gutterBottom>
                            Field Mappings:
                        </Typography>
                        
                        {generatedConfig.fields?.slice(0, 5).map((field: any, index: number) => (
                            <Typography key={index} variant="body2" sx={{ fontFamily: 'monospace', fontSize: '0.8rem' }}>
                                {field.targetPosition}. {field.fieldName} ‚Üí {field.sourceField || '(no source)'} 
                                ({field.transformationType})
                            </Typography>
                        ))}
                        
                        {generatedConfig.fields?.length > 5 && (
                            <Typography variant="body2" color="text.secondary">
                                ... and {generatedConfig.fields.length - 5} more fields
                            </Typography>
                        )}
                    </CardContent>
                </Card>
            )}
        </Container>
    );
};

export default TemplateConfigurationPage;